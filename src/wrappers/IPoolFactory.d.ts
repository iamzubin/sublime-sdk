/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface IPoolFactoryInterface extends ethers.utils.Interface {
  functions: {
    'collectionPeriod()': FunctionFragment;
    'extension()': FunctionFragment;
    'getProtocolFeeData()': FunctionFragment;
    'gracePeriodPenaltyFraction()': FunctionFragment;
    'liquidatorRewardFraction()': FunctionFragment;
    'marginCallDuration()': FunctionFragment;
    'matchCollateralRatioInterval()': FunctionFragment;
    'openBorrowPoolRegistry(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'poolCancelPenalityFraction()': FunctionFragment;
    'priceOracle()': FunctionFragment;
    'repaymentImpl()': FunctionFragment;
    'savingsAccount()': FunctionFragment;
    'volatilityThreshold(address)': FunctionFragment;
    'votingPassRatio()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'collectionPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'extension', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getProtocolFeeData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gracePeriodPenaltyFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidatorRewardFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marginCallDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'matchCollateralRatioInterval', values?: undefined): string;
  encodeFunctionData(functionFragment: 'openBorrowPoolRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolCancelPenalityFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repaymentImpl', values?: undefined): string;
  encodeFunctionData(functionFragment: 'savingsAccount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'volatilityThreshold', values: [string]): string;
  encodeFunctionData(functionFragment: 'votingPassRatio', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'collectionPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'extension', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProtocolFeeData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gracePeriodPenaltyFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidatorRewardFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marginCallDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'matchCollateralRatioInterval', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openBorrowPoolRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolCancelPenalityFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repaymentImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'savingsAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'volatilityThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votingPassRatio', data: BytesLike): Result;

  events: {};
}

export class IPoolFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolFactoryInterface;

  functions: {
    collectionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    extension(overrides?: CallOverrides): Promise<[string]>;

    'extension()'(overrides?: CallOverrides): Promise<[string]>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    gracePeriodPenaltyFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'gracePeriodPenaltyFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    marginCallDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    matchCollateralRatioInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    'matchCollateralRatioInterval()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    openBorrowPoolRegistry(pool: string, overrides?: CallOverrides): Promise<[boolean]>;

    'openBorrowPoolRegistry(address)'(pool: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    poolCancelPenalityFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'poolCancelPenalityFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    'priceOracle()'(overrides?: CallOverrides): Promise<[string]>;

    repaymentImpl(overrides?: CallOverrides): Promise<[string]>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<[string]>;

    savingsAccount(overrides?: CallOverrides): Promise<[string]>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<[string]>;

    volatilityThreshold(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'volatilityThreshold(address)'(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPassRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    'votingPassRatio()'(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  collectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  'collectionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

  extension(overrides?: CallOverrides): Promise<string>;

  'extension()'(overrides?: CallOverrides): Promise<string>;

  getProtocolFeeData(overrides?: CallOverrides): Promise<[BigNumber, string]>;

  'getProtocolFeeData()'(overrides?: CallOverrides): Promise<[BigNumber, string]>;

  gracePeriodPenaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'gracePeriodPenaltyFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  marginCallDuration(overrides?: CallOverrides): Promise<BigNumber>;

  'marginCallDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

  matchCollateralRatioInterval(overrides?: CallOverrides): Promise<BigNumber>;

  'matchCollateralRatioInterval()'(overrides?: CallOverrides): Promise<BigNumber>;

  openBorrowPoolRegistry(pool: string, overrides?: CallOverrides): Promise<boolean>;

  'openBorrowPoolRegistry(address)'(pool: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  poolCancelPenalityFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'poolCancelPenalityFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  'priceOracle()'(overrides?: CallOverrides): Promise<string>;

  repaymentImpl(overrides?: CallOverrides): Promise<string>;

  'repaymentImpl()'(overrides?: CallOverrides): Promise<string>;

  savingsAccount(overrides?: CallOverrides): Promise<string>;

  'savingsAccount()'(overrides?: CallOverrides): Promise<string>;

  volatilityThreshold(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  'volatilityThreshold(address)'(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  votingPassRatio(overrides?: CallOverrides): Promise<BigNumber>;

  'votingPassRatio()'(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    collectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

    extension(overrides?: CallOverrides): Promise<string>;

    'extension()'(overrides?: CallOverrides): Promise<string>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    gracePeriodPenaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'gracePeriodPenaltyFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    marginCallDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    matchCollateralRatioInterval(overrides?: CallOverrides): Promise<BigNumber>;

    'matchCollateralRatioInterval()'(overrides?: CallOverrides): Promise<BigNumber>;

    openBorrowPoolRegistry(pool: string, overrides?: CallOverrides): Promise<boolean>;

    'openBorrowPoolRegistry(address)'(pool: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    poolCancelPenalityFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'poolCancelPenalityFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    'priceOracle()'(overrides?: CallOverrides): Promise<string>;

    repaymentImpl(overrides?: CallOverrides): Promise<string>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<string>;

    savingsAccount(overrides?: CallOverrides): Promise<string>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<string>;

    volatilityThreshold(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    'volatilityThreshold(address)'(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingPassRatio(overrides?: CallOverrides): Promise<BigNumber>;

    'votingPassRatio()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    collectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

    extension(overrides?: CallOverrides): Promise<BigNumber>;

    'extension()'(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<BigNumber>;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<BigNumber>;

    gracePeriodPenaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'gracePeriodPenaltyFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    marginCallDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    matchCollateralRatioInterval(overrides?: CallOverrides): Promise<BigNumber>;

    'matchCollateralRatioInterval()'(overrides?: CallOverrides): Promise<BigNumber>;

    openBorrowPoolRegistry(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    'openBorrowPoolRegistry(address)'(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolCancelPenalityFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'poolCancelPenalityFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    'priceOracle()'(overrides?: CallOverrides): Promise<BigNumber>;

    repaymentImpl(overrides?: CallOverrides): Promise<BigNumber>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<BigNumber>;

    savingsAccount(overrides?: CallOverrides): Promise<BigNumber>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<BigNumber>;

    volatilityThreshold(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    'volatilityThreshold(address)'(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingPassRatio(overrides?: CallOverrides): Promise<BigNumber>;

    'votingPassRatio()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collectionPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extension(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'extension()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gracePeriodPenaltyFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'gracePeriodPenaltyFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marginCallDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchCollateralRatioInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'matchCollateralRatioInterval()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openBorrowPoolRegistry(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'openBorrowPoolRegistry(address)'(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCancelPenalityFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolCancelPenalityFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'priceOracle()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repaymentImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    savingsAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    volatilityThreshold(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'volatilityThreshold(address)'(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPassRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'votingPassRatio()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

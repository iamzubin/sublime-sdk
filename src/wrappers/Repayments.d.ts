/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface RepaymentsInterface extends ethers.utils.Interface {
  functions: {
    'didBorrowerDefault(address)': FunctionFragment;
    'getCurrentInstalmentInterval(address)': FunctionFragment;
    'getCurrentLoanInterval(address)': FunctionFragment;
    'getGracePeriodFraction()': FunctionFragment;
    'getInstalmentsCompleted(address)': FunctionFragment;
    'getInterestCalculationVars(address)': FunctionFragment;
    'getInterestDueTillInstalmentDeadline(address)': FunctionFragment;
    'getInterestLeft(address)': FunctionFragment;
    'getInterestOverdue(address)': FunctionFragment;
    'getInterestPerSecond(address)': FunctionFragment;
    'getNextInstalmentDeadline(address)': FunctionFragment;
    'getTotalRepaidAmount(address)': FunctionFragment;
    'initialize(address,uint256,uint256)': FunctionFragment;
    'initializeRepayment(uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'instalmentDeadlineExtended(address,uint256)': FunctionFragment;
    'isGracePenaltyApplicable(address)': FunctionFragment;
    'repay(address,uint256)': FunctionFragment;
    'repayInfo(address)': FunctionFragment;
    'repayPrincipal(address)': FunctionFragment;
    'repayState(address)': FunctionFragment;
    'updateGracePenaltyRate(uint256)': FunctionFragment;
    'updateGracePeriodFraction(uint256)': FunctionFragment;
    'updatePoolFactory(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'didBorrowerDefault', values: [string]): string;
  encodeFunctionData(functionFragment: 'getCurrentInstalmentInterval', values: [string]): string;
  encodeFunctionData(functionFragment: 'getCurrentLoanInterval', values: [string]): string;
  encodeFunctionData(functionFragment: 'getGracePeriodFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getInstalmentsCompleted', values: [string]): string;
  encodeFunctionData(functionFragment: 'getInterestCalculationVars', values: [string]): string;
  encodeFunctionData(functionFragment: 'getInterestDueTillInstalmentDeadline', values: [string]): string;
  encodeFunctionData(functionFragment: 'getInterestLeft', values: [string]): string;
  encodeFunctionData(functionFragment: 'getInterestOverdue', values: [string]): string;
  encodeFunctionData(functionFragment: 'getInterestPerSecond', values: [string]): string;
  encodeFunctionData(functionFragment: 'getNextInstalmentDeadline', values: [string]): string;
  encodeFunctionData(functionFragment: 'getTotalRepaidAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'initializeRepayment',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'instalmentDeadlineExtended', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isGracePenaltyApplicable', values: [string]): string;
  encodeFunctionData(functionFragment: 'repay', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'repayInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'repayPrincipal', values: [string]): string;
  encodeFunctionData(functionFragment: 'repayState', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateGracePenaltyRate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateGracePeriodFraction', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updatePoolFactory', values: [string]): string;

  decodeFunctionResult(functionFragment: 'didBorrowerDefault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentInstalmentInterval', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentLoanInterval', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGracePeriodFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInstalmentsCompleted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInterestCalculationVars', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInterestDueTillInstalmentDeadline', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInterestLeft', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInterestOverdue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInterestPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNextInstalmentDeadline', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalRepaidAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeRepayment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'instalmentDeadlineExtended', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isGracePenaltyApplicable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayPrincipal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateGracePenaltyRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateGracePeriodFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePoolFactory', data: BytesLike): Result;

  events: {
    'ExtensionRepaymentComplete(address,uint256)': EventFragment;
    'GracePenaltyRateUpdated(uint256)': EventFragment;
    'GracePenaltyRepaid(address,uint256)': EventFragment;
    'GracePeriodFractionUpdated(uint256)': EventFragment;
    'InterestRepaid(address,uint256)': EventFragment;
    'InterestRepaymentComplete(address,uint256)': EventFragment;
    'PartialExtensionRepaid(address,uint256)': EventFragment;
    'PoolFactoryUpdated(address)': EventFragment;
    'PrincipalRepaid(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ExtensionRepaymentComplete'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GracePenaltyRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GracePenaltyRepaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GracePeriodFractionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InterestRepaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InterestRepaymentComplete'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PartialExtensionRepaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolFactoryUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PrincipalRepaid'): EventFragment;
}

export class Repayments extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RepaymentsInterface;

  functions: {
    didBorrowerDefault(_poolID: string, overrides?: CallOverrides): Promise<[boolean]>;

    'didBorrowerDefault(address)'(_poolID: string, overrides?: CallOverrides): Promise<[boolean]>;

    getCurrentInstalmentInterval(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getCurrentInstalmentInterval(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentLoanInterval(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getCurrentLoanInterval(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getGracePeriodFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'getGracePeriodFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInstalmentsCompleted(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getInstalmentsCompleted(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getInterestCalculationVars(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getInterestCalculationVars(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getInterestDueTillInstalmentDeadline(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getInterestDueTillInstalmentDeadline(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getInterestLeft(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getInterestLeft(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getInterestOverdue(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getInterestOverdue(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getInterestPerSecond(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getInterestPerSecond(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextInstalmentDeadline(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getNextInstalmentDeadline(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalRepaidAmount(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getTotalRepaidAmount(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _poolFactory: string,
      _gracePenaltyRate: BigNumberish,
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(address,uint256,uint256)'(
      _poolFactory: string,
      _gracePenaltyRate: BigNumberish,
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeRepayment(
      numberOfTotalRepayments: BigNumberish,
      repaymentInterval: BigNumberish,
      borrowRate: BigNumberish,
      loanStartTime: BigNumberish,
      lentAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initializeRepayment(uint256,uint256,uint256,uint256,address)'(
      numberOfTotalRepayments: BigNumberish,
      repaymentInterval: BigNumberish,
      borrowRate: BigNumberish,
      loanStartTime: BigNumberish,
      lentAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instalmentDeadlineExtended(
      _poolID: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'instalmentDeadlineExtended(address,uint256)'(
      _poolID: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isGracePenaltyApplicable(_poolID: string, overrides?: CallOverrides): Promise<[boolean]>;

    'isGracePenaltyApplicable(address)'(_poolID: string, overrides?: CallOverrides): Promise<[boolean]>;

    repay(
      _poolID: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'repay(address,uint256)'(
      _poolID: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        numberOfTotalRepayments: BigNumber;
        gracePenaltyRate: BigNumber;
        gracePeriodFraction: BigNumber;
        loanDuration: BigNumber;
        repaymentInterval: BigNumber;
        borrowRate: BigNumber;
        loanStartTime: BigNumber;
        repayAsset: string;
      }
    >;

    'repayInfo(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        numberOfTotalRepayments: BigNumber;
        gracePenaltyRate: BigNumber;
        gracePeriodFraction: BigNumber;
        loanDuration: BigNumber;
        repaymentInterval: BigNumber;
        borrowRate: BigNumber;
        loanStartTime: BigNumber;
        repayAsset: string;
      }
    >;

    repayPrincipal(_poolID: string, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'repayPrincipal(address)'(
      _poolID: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber] & {
        repaidAmount: BigNumber;
        isLoanExtensionActive: boolean;
        loanDurationCovered: BigNumber;
        loanExtensionPeriod: BigNumber;
      }
    >;

    'repayState(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber] & {
        repaidAmount: BigNumber;
        isLoanExtensionActive: boolean;
        loanDurationCovered: BigNumber;
        loanExtensionPeriod: BigNumber;
      }
    >;

    updateGracePenaltyRate(
      _gracePenaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateGracePenaltyRate(uint256)'(
      _gracePenaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGracePeriodFraction(
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateGracePeriodFraction(uint256)'(
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolFactory(_poolFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'updatePoolFactory(address)'(
      _poolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  didBorrowerDefault(_poolID: string, overrides?: CallOverrides): Promise<boolean>;

  'didBorrowerDefault(address)'(_poolID: string, overrides?: CallOverrides): Promise<boolean>;

  getCurrentInstalmentInterval(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getCurrentInstalmentInterval(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentLoanInterval(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getCurrentLoanInterval(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  getGracePeriodFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'getGracePeriodFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  getInstalmentsCompleted(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getInstalmentsCompleted(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  getInterestCalculationVars(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  'getInterestCalculationVars(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getInterestDueTillInstalmentDeadline(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getInterestDueTillInstalmentDeadline(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  getInterestLeft(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getInterestLeft(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  getInterestOverdue(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getInterestOverdue(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  getInterestPerSecond(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getInterestPerSecond(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  getNextInstalmentDeadline(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getNextInstalmentDeadline(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalRepaidAmount(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getTotalRepaidAmount(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _poolFactory: string,
    _gracePenaltyRate: BigNumberish,
    _gracePeriodFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(address,uint256,uint256)'(
    _poolFactory: string,
    _gracePenaltyRate: BigNumberish,
    _gracePeriodFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeRepayment(
    numberOfTotalRepayments: BigNumberish,
    repaymentInterval: BigNumberish,
    borrowRate: BigNumberish,
    loanStartTime: BigNumberish,
    lentAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initializeRepayment(uint256,uint256,uint256,uint256,address)'(
    numberOfTotalRepayments: BigNumberish,
    repaymentInterval: BigNumberish,
    borrowRate: BigNumberish,
    loanStartTime: BigNumberish,
    lentAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instalmentDeadlineExtended(
    _poolID: string,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'instalmentDeadlineExtended(address,uint256)'(
    _poolID: string,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isGracePenaltyApplicable(_poolID: string, overrides?: CallOverrides): Promise<boolean>;

  'isGracePenaltyApplicable(address)'(_poolID: string, overrides?: CallOverrides): Promise<boolean>;

  repay(
    _poolID: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'repay(address,uint256)'(
    _poolID: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      numberOfTotalRepayments: BigNumber;
      gracePenaltyRate: BigNumber;
      gracePeriodFraction: BigNumber;
      loanDuration: BigNumber;
      repaymentInterval: BigNumber;
      borrowRate: BigNumber;
      loanStartTime: BigNumber;
      repayAsset: string;
    }
  >;

  'repayInfo(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      numberOfTotalRepayments: BigNumber;
      gracePenaltyRate: BigNumber;
      gracePeriodFraction: BigNumber;
      loanDuration: BigNumber;
      repaymentInterval: BigNumber;
      borrowRate: BigNumber;
      loanStartTime: BigNumber;
      repayAsset: string;
    }
  >;

  repayPrincipal(_poolID: string, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'repayPrincipal(address)'(
    _poolID: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayState(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, BigNumber] & {
      repaidAmount: BigNumber;
      isLoanExtensionActive: boolean;
      loanDurationCovered: BigNumber;
      loanExtensionPeriod: BigNumber;
    }
  >;

  'repayState(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, BigNumber] & {
      repaidAmount: BigNumber;
      isLoanExtensionActive: boolean;
      loanDurationCovered: BigNumber;
      loanExtensionPeriod: BigNumber;
    }
  >;

  updateGracePenaltyRate(
    _gracePenaltyRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateGracePenaltyRate(uint256)'(
    _gracePenaltyRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGracePeriodFraction(
    _gracePeriodFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateGracePeriodFraction(uint256)'(
    _gracePeriodFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolFactory(_poolFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'updatePoolFactory(address)'(
    _poolFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    didBorrowerDefault(_poolID: string, overrides?: CallOverrides): Promise<boolean>;

    'didBorrowerDefault(address)'(_poolID: string, overrides?: CallOverrides): Promise<boolean>;

    getCurrentInstalmentInterval(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getCurrentInstalmentInterval(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLoanInterval(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getCurrentLoanInterval(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getGracePeriodFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'getGracePeriodFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    getInstalmentsCompleted(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInstalmentsCompleted(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestCalculationVars(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getInterestCalculationVars(address)'(_poolID: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getInterestDueTillInstalmentDeadline(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInterestDueTillInstalmentDeadline(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestLeft(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInterestLeft(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestOverdue(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInterestOverdue(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestPerSecond(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInterestPerSecond(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNextInstalmentDeadline(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getNextInstalmentDeadline(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalRepaidAmount(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getTotalRepaidAmount(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _poolFactory: string,
      _gracePenaltyRate: BigNumberish,
      _gracePeriodFraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'initialize(address,uint256,uint256)'(
      _poolFactory: string,
      _gracePenaltyRate: BigNumberish,
      _gracePeriodFraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeRepayment(
      numberOfTotalRepayments: BigNumberish,
      repaymentInterval: BigNumberish,
      borrowRate: BigNumberish,
      loanStartTime: BigNumberish,
      lentAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'initializeRepayment(uint256,uint256,uint256,uint256,address)'(
      numberOfTotalRepayments: BigNumberish,
      repaymentInterval: BigNumberish,
      borrowRate: BigNumberish,
      loanStartTime: BigNumberish,
      lentAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    instalmentDeadlineExtended(_poolID: string, _period: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'instalmentDeadlineExtended(address,uint256)'(_poolID: string, _period: BigNumberish, overrides?: CallOverrides): Promise<void>;

    isGracePenaltyApplicable(_poolID: string, overrides?: CallOverrides): Promise<boolean>;

    'isGracePenaltyApplicable(address)'(_poolID: string, overrides?: CallOverrides): Promise<boolean>;

    repay(_poolID: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'repay(address,uint256)'(_poolID: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    repayInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        numberOfTotalRepayments: BigNumber;
        gracePenaltyRate: BigNumber;
        gracePeriodFraction: BigNumber;
        loanDuration: BigNumber;
        repaymentInterval: BigNumber;
        borrowRate: BigNumber;
        loanStartTime: BigNumber;
        repayAsset: string;
      }
    >;

    'repayInfo(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        numberOfTotalRepayments: BigNumber;
        gracePenaltyRate: BigNumber;
        gracePeriodFraction: BigNumber;
        loanDuration: BigNumber;
        repaymentInterval: BigNumber;
        borrowRate: BigNumber;
        loanStartTime: BigNumber;
        repayAsset: string;
      }
    >;

    repayPrincipal(_poolID: string, overrides?: CallOverrides): Promise<void>;

    'repayPrincipal(address)'(_poolID: string, overrides?: CallOverrides): Promise<void>;

    repayState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber] & {
        repaidAmount: BigNumber;
        isLoanExtensionActive: boolean;
        loanDurationCovered: BigNumber;
        loanExtensionPeriod: BigNumber;
      }
    >;

    'repayState(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber] & {
        repaidAmount: BigNumber;
        isLoanExtensionActive: boolean;
        loanDurationCovered: BigNumber;
        loanExtensionPeriod: BigNumber;
      }
    >;

    updateGracePenaltyRate(_gracePenaltyRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateGracePenaltyRate(uint256)'(_gracePenaltyRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateGracePeriodFraction(_gracePeriodFraction: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateGracePeriodFraction(uint256)'(_gracePeriodFraction: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updatePoolFactory(_poolFactory: string, overrides?: CallOverrides): Promise<void>;

    'updatePoolFactory(address)'(_poolFactory: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ExtensionRepaymentComplete(
      poolID: null,
      repayAmount: null
    ): TypedEventFilter<[string, BigNumber], { poolID: string; repayAmount: BigNumber }>;

    GracePenaltyRateUpdated(gracePenaltyRate: null): TypedEventFilter<[BigNumber], { gracePenaltyRate: BigNumber }>;

    GracePenaltyRepaid(poolID: null, repayAmount: null): TypedEventFilter<[string, BigNumber], { poolID: string; repayAmount: BigNumber }>;

    GracePeriodFractionUpdated(gracePeriodFraction: null): TypedEventFilter<[BigNumber], { gracePeriodFraction: BigNumber }>;

    InterestRepaid(poolID: null, repayAmount: null): TypedEventFilter<[string, BigNumber], { poolID: string; repayAmount: BigNumber }>;

    InterestRepaymentComplete(
      poolID: null,
      repayAmount: null
    ): TypedEventFilter<[string, BigNumber], { poolID: string; repayAmount: BigNumber }>;

    PartialExtensionRepaid(
      poolID: null,
      repayAmount: null
    ): TypedEventFilter<[string, BigNumber], { poolID: string; repayAmount: BigNumber }>;

    PoolFactoryUpdated(poolFactory: null): TypedEventFilter<[string], { poolFactory: string }>;

    PrincipalRepaid(poolID: null, repayAmount: null): TypedEventFilter<[string, BigNumber], { poolID: string; repayAmount: BigNumber }>;
  };

  estimateGas: {
    didBorrowerDefault(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'didBorrowerDefault(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentInstalmentInterval(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getCurrentInstalmentInterval(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLoanInterval(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getCurrentLoanInterval(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getGracePeriodFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'getGracePeriodFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    getInstalmentsCompleted(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInstalmentsCompleted(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestCalculationVars(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInterestCalculationVars(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestDueTillInstalmentDeadline(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInterestDueTillInstalmentDeadline(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestLeft(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInterestLeft(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestOverdue(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInterestOverdue(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestPerSecond(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInterestPerSecond(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNextInstalmentDeadline(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getNextInstalmentDeadline(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalRepaidAmount(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getTotalRepaidAmount(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _poolFactory: string,
      _gracePenaltyRate: BigNumberish,
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(address,uint256,uint256)'(
      _poolFactory: string,
      _gracePenaltyRate: BigNumberish,
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeRepayment(
      numberOfTotalRepayments: BigNumberish,
      repaymentInterval: BigNumberish,
      borrowRate: BigNumberish,
      loanStartTime: BigNumberish,
      lentAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initializeRepayment(uint256,uint256,uint256,uint256,address)'(
      numberOfTotalRepayments: BigNumberish,
      repaymentInterval: BigNumberish,
      borrowRate: BigNumberish,
      loanStartTime: BigNumberish,
      lentAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instalmentDeadlineExtended(
      _poolID: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'instalmentDeadlineExtended(address,uint256)'(
      _poolID: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isGracePenaltyApplicable(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isGracePenaltyApplicable(address)'(_poolID: string, overrides?: CallOverrides): Promise<BigNumber>;

    repay(_poolID: string, _amount: BigNumberish, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'repay(address,uint256)'(
      _poolID: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'repayInfo(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    repayPrincipal(_poolID: string, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'repayPrincipal(address)'(_poolID: string, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    repayState(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'repayState(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateGracePenaltyRate(
      _gracePenaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateGracePenaltyRate(uint256)'(
      _gracePenaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGracePeriodFraction(
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateGracePeriodFraction(uint256)'(
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolFactory(_poolFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updatePoolFactory(address)'(_poolFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    didBorrowerDefault(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'didBorrowerDefault(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentInstalmentInterval(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getCurrentInstalmentInterval(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentLoanInterval(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getCurrentLoanInterval(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGracePeriodFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getGracePeriodFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInstalmentsCompleted(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getInstalmentsCompleted(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterestCalculationVars(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getInterestCalculationVars(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterestDueTillInstalmentDeadline(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getInterestDueTillInstalmentDeadline(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterestLeft(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getInterestLeft(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterestOverdue(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getInterestOverdue(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterestPerSecond(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getInterestPerSecond(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextInstalmentDeadline(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getNextInstalmentDeadline(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalRepaidAmount(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getTotalRepaidAmount(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _poolFactory: string,
      _gracePenaltyRate: BigNumberish,
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(address,uint256,uint256)'(
      _poolFactory: string,
      _gracePenaltyRate: BigNumberish,
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeRepayment(
      numberOfTotalRepayments: BigNumberish,
      repaymentInterval: BigNumberish,
      borrowRate: BigNumberish,
      loanStartTime: BigNumberish,
      lentAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initializeRepayment(uint256,uint256,uint256,uint256,address)'(
      numberOfTotalRepayments: BigNumberish,
      repaymentInterval: BigNumberish,
      borrowRate: BigNumberish,
      loanStartTime: BigNumberish,
      lentAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instalmentDeadlineExtended(
      _poolID: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'instalmentDeadlineExtended(address,uint256)'(
      _poolID: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isGracePenaltyApplicable(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isGracePenaltyApplicable(address)'(_poolID: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      _poolID: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'repay(address,uint256)'(
      _poolID: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayInfo(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'repayInfo(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repayPrincipal(_poolID: string, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'repayPrincipal(address)'(
      _poolID: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayState(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'repayState(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateGracePenaltyRate(
      _gracePenaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateGracePenaltyRate(uint256)'(
      _gracePenaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGracePeriodFraction(
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateGracePeriodFraction(uint256)'(
      _gracePeriodFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolFactory(_poolFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'updatePoolFactory(address)'(
      _poolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

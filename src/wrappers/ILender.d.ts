/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface ILenderInterface extends ethers.utils.Interface {
  functions: {
    'ResultOfVoting(bytes32)': FunctionFragment;
    'borrow(bytes32,address)': FunctionFragment;
    'getAmountSupplied(bytes32,address)': FunctionFragment;
    'getAmountWithrawable(bytes32,address)': FunctionFragment;
    'getAmountWithrawn(bytes32,address)': FunctionFragment;
    'getCollateralCalled(bytes32,address)': FunctionFragment;
    'getDefaultVote(bytes32,address)': FunctionFragment;
    'getExists(bytes32,address)': FunctionFragment;
    'getExtraCollateralDueBlock(bytes32,address)': FunctionFragment;
    'getPercentWithdrawable(bytes32,address)': FunctionFragment;
    'getPoolImpl()': FunctionFragment;
    'getRepayImpl()': FunctionFragment;
    'getResultOfVoting(bytes32)': FunctionFragment;
    'getVotedOnExtension(bytes32,address)': FunctionFragment;
    'requestCollateralCall(bytes32)': FunctionFragment;
    'setAmountSupplied(bytes32,address,uint256)': FunctionFragment;
    'setAmountWithrawable(bytes32,address,uint256)': FunctionFragment;
    'setAmountWithrawn(bytes32,address,uint256)': FunctionFragment;
    'setCollateralCalled(bytes32,address,bool)': FunctionFragment;
    'setDefaultVote(bytes32,address,bool)': FunctionFragment;
    'setExists(bytes32,address,bool)': FunctionFragment;
    'setExtraCollateralDueBlock(bytes32,address,uint256)': FunctionFragment;
    'setVotedOnExtension(bytes32,address,bool)': FunctionFragment;
    'supplyLiquidity(address,bytes32,uint256)': FunctionFragment;
    'transferPoolImpl(address)': FunctionFragment;
    'transferRepayImpl(address)': FunctionFragment;
    'voteOnExtension(bytes32)': FunctionFragment;
    'withdrawInterest(bytes32,address,uint256)': FunctionFragment;
    'withdrawLiquidity(bytes32,address)': FunctionFragment;
    'withdrawRepayment(bytes32,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'ResultOfVoting', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'borrow', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'getAmountSupplied', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'getAmountWithrawable', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'getAmountWithrawn', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'getCollateralCalled', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'getDefaultVote', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'getExists', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'getExtraCollateralDueBlock', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'getPercentWithdrawable', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'getPoolImpl', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRepayImpl', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getResultOfVoting', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getVotedOnExtension', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'requestCollateralCall', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'setAmountSupplied', values: [BytesLike, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setAmountWithrawable', values: [BytesLike, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setAmountWithrawn', values: [BytesLike, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setCollateralCalled', values: [BytesLike, string, boolean]): string;
  encodeFunctionData(functionFragment: 'setDefaultVote', values: [BytesLike, string, boolean]): string;
  encodeFunctionData(functionFragment: 'setExists', values: [BytesLike, string, boolean]): string;
  encodeFunctionData(functionFragment: 'setExtraCollateralDueBlock', values: [BytesLike, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setVotedOnExtension', values: [BytesLike, string, boolean]): string;
  encodeFunctionData(functionFragment: 'supplyLiquidity', values: [string, BytesLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferPoolImpl', values: [string]): string;
  encodeFunctionData(functionFragment: 'transferRepayImpl', values: [string]): string;
  encodeFunctionData(functionFragment: 'voteOnExtension', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'withdrawInterest', values: [BytesLike, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawLiquidity', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'withdrawRepayment', values: [BytesLike, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'ResultOfVoting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmountSupplied', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmountWithrawable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmountWithrawn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralCalled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDefaultVote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExtraCollateralDueBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPercentWithdrawable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRepayImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getResultOfVoting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVotedOnExtension', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestCollateralCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAmountSupplied', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAmountWithrawable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAmountWithrawn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCollateralCalled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDefaultVote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExtraCollateralDueBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVotedOnExtension', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supplyLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferPoolImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferRepayImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voteOnExtension', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawRepayment', data: BytesLike): Result;

  events: {};
}

export class ILender extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILenderInterface;

  functions: {
    ResultOfVoting(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'ResultOfVoting(bytes32)'(
      poolHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      poolHash: BytesLike,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'borrow(bytes32,address)'(
      poolHash: BytesLike,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountSupplied(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getAmountSupplied(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmountWithrawable(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getAmountWithrawable(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmountWithrawn(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getAmountWithrawn(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCollateralCalled(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[boolean]>;

    'getCollateralCalled(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[boolean]>;

    getDefaultVote(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[boolean]>;

    'getDefaultVote(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[boolean]>;

    getExists(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[boolean]>;

    'getExists(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[boolean]>;

    getExtraCollateralDueBlock(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getExtraCollateralDueBlock(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPercentWithdrawable(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getPercentWithdrawable(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolImpl(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'getPoolImpl()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getRepayImpl(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'getRepayImpl()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getResultOfVoting(poolHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getResultOfVoting(bytes32)'(poolHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    getVotedOnExtension(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[boolean]>;

    'getVotedOnExtension(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<[boolean]>;

    requestCollateralCall(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'requestCollateralCall(bytes32)'(
      poolHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAmountSupplied(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setAmountSupplied(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAmountWithrawable(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setAmountWithrawable(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAmountWithrawn(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setAmountWithrawn(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralCalled(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setCollateralCalled(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultVote(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setDefaultVote(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExists(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setExists(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExtraCollateralDueBlock(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setExtraCollateralDueBlock(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVotedOnExtension(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setVotedOnExtension(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplyLiquidity(
      lenderAddress: string,
      poolHash: BytesLike,
      amountSupplied: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'supplyLiquidity(address,bytes32,uint256)'(
      lenderAddress: string,
      poolHash: BytesLike,
      amountSupplied: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPoolImpl(poolImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'transferPoolImpl(address)'(
      poolImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferRepayImpl(repayImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'transferRepayImpl(address)'(
      repayImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteOnExtension(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'voteOnExtension(bytes32)'(
      poolHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawInterest(
      poolHash: BytesLike,
      lenderAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawInterest(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lenderAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidity(
      poolHash: BytesLike,
      lenderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawLiquidity(bytes32,address)'(
      poolHash: BytesLike,
      lenderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRepayment(
      poolHash: BytesLike,
      amountWantToWithdraw: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawRepayment(bytes32,uint256)'(
      poolHash: BytesLike,
      amountWantToWithdraw: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ResultOfVoting(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'ResultOfVoting(bytes32)'(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  borrow(poolHash: BytesLike, borrower: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'borrow(bytes32,address)'(
    poolHash: BytesLike,
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountSupplied(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getAmountSupplied(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAmountWithrawable(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getAmountWithrawable(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAmountWithrawn(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getAmountWithrawn(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  getCollateralCalled(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

  'getCollateralCalled(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

  getDefaultVote(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

  'getDefaultVote(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

  getExists(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

  'getExists(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

  getExtraCollateralDueBlock(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getExtraCollateralDueBlock(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPercentWithdrawable(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getPercentWithdrawable(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPoolImpl(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'getPoolImpl()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getRepayImpl(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'getRepayImpl()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getResultOfVoting(poolHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  'getResultOfVoting(bytes32)'(poolHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getVotedOnExtension(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

  'getVotedOnExtension(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

  requestCollateralCall(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'requestCollateralCall(bytes32)'(
    poolHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAmountSupplied(
    poolHash: BytesLike,
    lender: string,
    newVal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setAmountSupplied(bytes32,address,uint256)'(
    poolHash: BytesLike,
    lender: string,
    newVal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAmountWithrawable(
    poolHash: BytesLike,
    lender: string,
    newVal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setAmountWithrawable(bytes32,address,uint256)'(
    poolHash: BytesLike,
    lender: string,
    newVal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAmountWithrawn(
    poolHash: BytesLike,
    lender: string,
    newVal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setAmountWithrawn(bytes32,address,uint256)'(
    poolHash: BytesLike,
    lender: string,
    newVal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralCalled(
    poolHash: BytesLike,
    lender: string,
    newVal: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setCollateralCalled(bytes32,address,bool)'(
    poolHash: BytesLike,
    lender: string,
    newVal: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultVote(
    poolHash: BytesLike,
    lender: string,
    newVal: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setDefaultVote(bytes32,address,bool)'(
    poolHash: BytesLike,
    lender: string,
    newVal: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExists(
    poolHash: BytesLike,
    lender: string,
    newVal: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setExists(bytes32,address,bool)'(
    poolHash: BytesLike,
    lender: string,
    newVal: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExtraCollateralDueBlock(
    poolHash: BytesLike,
    lender: string,
    newVal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setExtraCollateralDueBlock(bytes32,address,uint256)'(
    poolHash: BytesLike,
    lender: string,
    newVal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVotedOnExtension(
    poolHash: BytesLike,
    lender: string,
    newVal: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setVotedOnExtension(bytes32,address,bool)'(
    poolHash: BytesLike,
    lender: string,
    newVal: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplyLiquidity(
    lenderAddress: string,
    poolHash: BytesLike,
    amountSupplied: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'supplyLiquidity(address,bytes32,uint256)'(
    lenderAddress: string,
    poolHash: BytesLike,
    amountSupplied: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPoolImpl(poolImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'transferPoolImpl(address)'(poolImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  transferRepayImpl(repayImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'transferRepayImpl(address)'(
    repayImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteOnExtension(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'voteOnExtension(bytes32)'(
    poolHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawInterest(
    poolHash: BytesLike,
    lenderAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawInterest(bytes32,address,uint256)'(
    poolHash: BytesLike,
    lenderAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidity(
    poolHash: BytesLike,
    lenderAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawLiquidity(bytes32,address)'(
    poolHash: BytesLike,
    lenderAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRepayment(
    poolHash: BytesLike,
    amountWantToWithdraw: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawRepayment(bytes32,uint256)'(
    poolHash: BytesLike,
    amountWantToWithdraw: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ResultOfVoting(poolHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    'ResultOfVoting(bytes32)'(poolHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    borrow(poolHash: BytesLike, borrower: string, overrides?: CallOverrides): Promise<BigNumber>;

    'borrow(bytes32,address)'(poolHash: BytesLike, borrower: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountSupplied(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getAmountSupplied(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountWithrawable(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getAmountWithrawable(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountWithrawn(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getAmountWithrawn(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralCalled(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

    'getCollateralCalled(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

    getDefaultVote(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

    'getDefaultVote(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

    getExists(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

    'getExists(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

    getExtraCollateralDueBlock(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getExtraCollateralDueBlock(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPercentWithdrawable(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getPercentWithdrawable(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolImpl(overrides?: CallOverrides): Promise<string>;

    'getPoolImpl()'(overrides?: CallOverrides): Promise<string>;

    getRepayImpl(overrides?: CallOverrides): Promise<string>;

    'getRepayImpl()'(overrides?: CallOverrides): Promise<string>;

    getResultOfVoting(poolHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'getResultOfVoting(bytes32)'(poolHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getVotedOnExtension(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

    'getVotedOnExtension(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<boolean>;

    requestCollateralCall(poolHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    'requestCollateralCall(bytes32)'(poolHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    setAmountSupplied(poolHash: BytesLike, lender: string, newVal: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'setAmountSupplied(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAmountWithrawable(poolHash: BytesLike, lender: string, newVal: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'setAmountWithrawable(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAmountWithrawn(poolHash: BytesLike, lender: string, newVal: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'setAmountWithrawn(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralCalled(poolHash: BytesLike, lender: string, newVal: boolean, overrides?: CallOverrides): Promise<void>;

    'setCollateralCalled(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultVote(poolHash: BytesLike, lender: string, newVal: boolean, overrides?: CallOverrides): Promise<void>;

    'setDefaultVote(bytes32,address,bool)'(poolHash: BytesLike, lender: string, newVal: boolean, overrides?: CallOverrides): Promise<void>;

    setExists(poolHash: BytesLike, lender: string, newVal: boolean, overrides?: CallOverrides): Promise<void>;

    'setExists(bytes32,address,bool)'(poolHash: BytesLike, lender: string, newVal: boolean, overrides?: CallOverrides): Promise<void>;

    setExtraCollateralDueBlock(poolHash: BytesLike, lender: string, newVal: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'setExtraCollateralDueBlock(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotedOnExtension(poolHash: BytesLike, lender: string, newVal: boolean, overrides?: CallOverrides): Promise<void>;

    'setVotedOnExtension(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyLiquidity(lenderAddress: string, poolHash: BytesLike, amountSupplied: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'supplyLiquidity(address,bytes32,uint256)'(
      lenderAddress: string,
      poolHash: BytesLike,
      amountSupplied: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPoolImpl(poolImpl: string, overrides?: CallOverrides): Promise<void>;

    'transferPoolImpl(address)'(poolImpl: string, overrides?: CallOverrides): Promise<void>;

    transferRepayImpl(repayImpl: string, overrides?: CallOverrides): Promise<void>;

    'transferRepayImpl(address)'(repayImpl: string, overrides?: CallOverrides): Promise<void>;

    voteOnExtension(poolHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    'voteOnExtension(bytes32)'(poolHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    withdrawInterest(poolHash: BytesLike, lenderAddress: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdrawInterest(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lenderAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLiquidity(poolHash: BytesLike, lenderAddress: string, overrides?: CallOverrides): Promise<void>;

    'withdrawLiquidity(bytes32,address)'(poolHash: BytesLike, lenderAddress: string, overrides?: CallOverrides): Promise<void>;

    withdrawRepayment(poolHash: BytesLike, amountWantToWithdraw: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdrawRepayment(bytes32,uint256)'(poolHash: BytesLike, amountWantToWithdraw: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    ResultOfVoting(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'ResultOfVoting(bytes32)'(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    borrow(poolHash: BytesLike, borrower: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'borrow(bytes32,address)'(
      poolHash: BytesLike,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountSupplied(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getAmountSupplied(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountWithrawable(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getAmountWithrawable(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountWithrawn(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getAmountWithrawn(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralCalled(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getCollateralCalled(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultVote(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getDefaultVote(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getExists(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getExists(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getExtraCollateralDueBlock(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getExtraCollateralDueBlock(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPercentWithdrawable(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getPercentWithdrawable(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolImpl(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'getPoolImpl()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getRepayImpl(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'getRepayImpl()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getResultOfVoting(poolHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'getResultOfVoting(bytes32)'(poolHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getVotedOnExtension(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getVotedOnExtension(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    requestCollateralCall(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'requestCollateralCall(bytes32)'(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setAmountSupplied(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setAmountSupplied(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAmountWithrawable(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setAmountWithrawable(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAmountWithrawn(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setAmountWithrawn(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralCalled(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setCollateralCalled(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultVote(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setDefaultVote(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExists(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setExists(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExtraCollateralDueBlock(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setExtraCollateralDueBlock(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVotedOnExtension(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setVotedOnExtension(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplyLiquidity(
      lenderAddress: string,
      poolHash: BytesLike,
      amountSupplied: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'supplyLiquidity(address,bytes32,uint256)'(
      lenderAddress: string,
      poolHash: BytesLike,
      amountSupplied: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPoolImpl(poolImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'transferPoolImpl(address)'(poolImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    transferRepayImpl(repayImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'transferRepayImpl(address)'(repayImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    voteOnExtension(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'voteOnExtension(bytes32)'(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawInterest(
      poolHash: BytesLike,
      lenderAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawInterest(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lenderAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidity(
      poolHash: BytesLike,
      lenderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawLiquidity(bytes32,address)'(
      poolHash: BytesLike,
      lenderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRepayment(
      poolHash: BytesLike,
      amountWantToWithdraw: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawRepayment(bytes32,uint256)'(
      poolHash: BytesLike,
      amountWantToWithdraw: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ResultOfVoting(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'ResultOfVoting(bytes32)'(
      poolHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      poolHash: BytesLike,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'borrow(bytes32,address)'(
      poolHash: BytesLike,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountSupplied(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getAmountSupplied(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountWithrawable(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getAmountWithrawable(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountWithrawn(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getAmountWithrawn(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralCalled(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getCollateralCalled(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDefaultVote(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getDefaultVote(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExists(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getExists(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExtraCollateralDueBlock(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getExtraCollateralDueBlock(bytes32,address)'(
      poolHash: BytesLike,
      lender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPercentWithdrawable(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getPercentWithdrawable(bytes32,address)'(
      poolHash: BytesLike,
      lender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolImpl(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'getPoolImpl()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getRepayImpl(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'getRepayImpl()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getResultOfVoting(poolHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getResultOfVoting(bytes32)'(poolHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotedOnExtension(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getVotedOnExtension(bytes32,address)'(poolHash: BytesLike, lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestCollateralCall(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'requestCollateralCall(bytes32)'(
      poolHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAmountSupplied(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setAmountSupplied(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAmountWithrawable(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setAmountWithrawable(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAmountWithrawn(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setAmountWithrawn(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralCalled(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setCollateralCalled(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultVote(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setDefaultVote(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExists(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setExists(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExtraCollateralDueBlock(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setExtraCollateralDueBlock(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lender: string,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVotedOnExtension(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setVotedOnExtension(bytes32,address,bool)'(
      poolHash: BytesLike,
      lender: string,
      newVal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplyLiquidity(
      lenderAddress: string,
      poolHash: BytesLike,
      amountSupplied: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'supplyLiquidity(address,bytes32,uint256)'(
      lenderAddress: string,
      poolHash: BytesLike,
      amountSupplied: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPoolImpl(poolImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'transferPoolImpl(address)'(
      poolImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferRepayImpl(repayImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'transferRepayImpl(address)'(
      repayImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteOnExtension(poolHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'voteOnExtension(bytes32)'(
      poolHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawInterest(
      poolHash: BytesLike,
      lenderAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawInterest(bytes32,address,uint256)'(
      poolHash: BytesLike,
      lenderAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      poolHash: BytesLike,
      lenderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawLiquidity(bytes32,address)'(
      poolHash: BytesLike,
      lenderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRepayment(
      poolHash: BytesLike,
      amountWantToWithdraw: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawRepayment(bytes32,uint256)'(
      poolHash: BytesLike,
      amountWantToWithdraw: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

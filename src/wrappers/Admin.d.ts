/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface AdminInterface extends ethers.utils.Interface {
  functions: {
    'addStrategy(address,address)': FunctionFragment;
    'setChainlinkPriceFeed(address,address,address)': FunctionFragment;
    'setUpAllOracles(address)': FunctionFragment;
    'setUpChainlinkOracles(address)': FunctionFragment;
    'setUpUniswapOracles(address)': FunctionFragment;
    'setUp_USDC_ETH_oracles(address)': FunctionFragment;
    'updateDefaultStrategy(address,address)': FunctionFragment;
    'updatePooledCLSavingsAccount(address,address)': FunctionFragment;
    'updateSavingsAccount(address,address)': FunctionFragment;
    'updateStrategy(address,uint256,address,address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addStrategy', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'setChainlinkPriceFeed', values: [string, string, string]): string;
  encodeFunctionData(functionFragment: 'setUpAllOracles', values: [string]): string;
  encodeFunctionData(functionFragment: 'setUpChainlinkOracles', values: [string]): string;
  encodeFunctionData(functionFragment: 'setUpUniswapOracles', values: [string]): string;
  encodeFunctionData(functionFragment: 'setUp_USDC_ETH_oracles', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateDefaultStrategy', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'updatePooledCLSavingsAccount', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'updateSavingsAccount', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'updateStrategy', values: [string, BigNumberish, string, string]): string;

  decodeFunctionResult(functionFragment: 'addStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setChainlinkPriceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUpAllOracles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUpChainlinkOracles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUpUniswapOracles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUp_USDC_ETH_oracles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDefaultStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePooledCLSavingsAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSavingsAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStrategy', data: BytesLike): Result;

  events: {};
}

export class Admin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AdminInterface;

  functions: {
    addStrategy(
      strategyRegistry: string,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'addStrategy(address,address)'(
      strategyRegistry: string,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainlinkPriceFeed(
      priceOracle: string,
      asset: string,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setChainlinkPriceFeed(address,address,address)'(
      priceOracle: string,
      asset: string,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpAllOracles(priceOracleAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'setUpAllOracles(address)'(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpChainlinkOracles(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setUpChainlinkOracles(address)'(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpUniswapOracles(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setUpUniswapOracles(address)'(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUp_USDC_ETH_oracles(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setUp_USDC_ETH_oracles(address)'(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDefaultStrategy(
      creditLine: string,
      noYield: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateDefaultStrategy(address,address)'(
      creditLine: string,
      noYield: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePooledCLSavingsAccount(
      pooledCreditLineAddress: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updatePooledCLSavingsAccount(address,address)'(
      pooledCreditLineAddress: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSavingsAccount(
      creditLine: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateSavingsAccount(address,address)'(
      creditLine: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStrategy(
      strategyRegistry: string,
      index: BigNumberish,
      oldStrategy: string,
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateStrategy(address,uint256,address,address)'(
      strategyRegistry: string,
      index: BigNumberish,
      oldStrategy: string,
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addStrategy(
    strategyRegistry: string,
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'addStrategy(address,address)'(
    strategyRegistry: string,
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainlinkPriceFeed(
    priceOracle: string,
    asset: string,
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setChainlinkPriceFeed(address,address,address)'(
    priceOracle: string,
    asset: string,
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpAllOracles(priceOracleAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'setUpAllOracles(address)'(
    priceOracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpChainlinkOracles(
    priceOracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setUpChainlinkOracles(address)'(
    priceOracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpUniswapOracles(
    priceOracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setUpUniswapOracles(address)'(
    priceOracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUp_USDC_ETH_oracles(
    priceOracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setUp_USDC_ETH_oracles(address)'(
    priceOracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDefaultStrategy(
    creditLine: string,
    noYield: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateDefaultStrategy(address,address)'(
    creditLine: string,
    noYield: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePooledCLSavingsAccount(
    pooledCreditLineAddress: string,
    savingsAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updatePooledCLSavingsAccount(address,address)'(
    pooledCreditLineAddress: string,
    savingsAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSavingsAccount(
    creditLine: string,
    savingsAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateSavingsAccount(address,address)'(
    creditLine: string,
    savingsAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStrategy(
    strategyRegistry: string,
    index: BigNumberish,
    oldStrategy: string,
    newStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateStrategy(address,uint256,address,address)'(
    strategyRegistry: string,
    index: BigNumberish,
    oldStrategy: string,
    newStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addStrategy(strategyRegistry: string, strategy: string, overrides?: CallOverrides): Promise<void>;

    'addStrategy(address,address)'(strategyRegistry: string, strategy: string, overrides?: CallOverrides): Promise<void>;

    setChainlinkPriceFeed(priceOracle: string, asset: string, oracle: string, overrides?: CallOverrides): Promise<void>;

    'setChainlinkPriceFeed(address,address,address)'(
      priceOracle: string,
      asset: string,
      oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpAllOracles(priceOracleAddress: string, overrides?: CallOverrides): Promise<void>;

    'setUpAllOracles(address)'(priceOracleAddress: string, overrides?: CallOverrides): Promise<void>;

    setUpChainlinkOracles(priceOracleAddress: string, overrides?: CallOverrides): Promise<void>;

    'setUpChainlinkOracles(address)'(priceOracleAddress: string, overrides?: CallOverrides): Promise<void>;

    setUpUniswapOracles(priceOracleAddress: string, overrides?: CallOverrides): Promise<void>;

    'setUpUniswapOracles(address)'(priceOracleAddress: string, overrides?: CallOverrides): Promise<void>;

    setUp_USDC_ETH_oracles(priceOracleAddress: string, overrides?: CallOverrides): Promise<void>;

    'setUp_USDC_ETH_oracles(address)'(priceOracleAddress: string, overrides?: CallOverrides): Promise<void>;

    updateDefaultStrategy(creditLine: string, noYield: string, overrides?: CallOverrides): Promise<void>;

    'updateDefaultStrategy(address,address)'(creditLine: string, noYield: string, overrides?: CallOverrides): Promise<void>;

    updatePooledCLSavingsAccount(pooledCreditLineAddress: string, savingsAccount: string, overrides?: CallOverrides): Promise<void>;

    'updatePooledCLSavingsAccount(address,address)'(
      pooledCreditLineAddress: string,
      savingsAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSavingsAccount(creditLine: string, savingsAccount: string, overrides?: CallOverrides): Promise<void>;

    'updateSavingsAccount(address,address)'(creditLine: string, savingsAccount: string, overrides?: CallOverrides): Promise<void>;

    updateStrategy(
      strategyRegistry: string,
      index: BigNumberish,
      oldStrategy: string,
      newStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'updateStrategy(address,uint256,address,address)'(
      strategyRegistry: string,
      index: BigNumberish,
      oldStrategy: string,
      newStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addStrategy(
      strategyRegistry: string,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'addStrategy(address,address)'(
      strategyRegistry: string,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainlinkPriceFeed(
      priceOracle: string,
      asset: string,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setChainlinkPriceFeed(address,address,address)'(
      priceOracle: string,
      asset: string,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpAllOracles(priceOracleAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setUpAllOracles(address)'(priceOracleAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setUpChainlinkOracles(priceOracleAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setUpChainlinkOracles(address)'(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpUniswapOracles(priceOracleAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setUpUniswapOracles(address)'(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUp_USDC_ETH_oracles(priceOracleAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setUp_USDC_ETH_oracles(address)'(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDefaultStrategy(
      creditLine: string,
      noYield: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateDefaultStrategy(address,address)'(
      creditLine: string,
      noYield: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePooledCLSavingsAccount(
      pooledCreditLineAddress: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updatePooledCLSavingsAccount(address,address)'(
      pooledCreditLineAddress: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSavingsAccount(
      creditLine: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateSavingsAccount(address,address)'(
      creditLine: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStrategy(
      strategyRegistry: string,
      index: BigNumberish,
      oldStrategy: string,
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateStrategy(address,uint256,address,address)'(
      strategyRegistry: string,
      index: BigNumberish,
      oldStrategy: string,
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStrategy(
      strategyRegistry: string,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'addStrategy(address,address)'(
      strategyRegistry: string,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkPriceFeed(
      priceOracle: string,
      asset: string,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setChainlinkPriceFeed(address,address,address)'(
      priceOracle: string,
      asset: string,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpAllOracles(priceOracleAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'setUpAllOracles(address)'(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpChainlinkOracles(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setUpChainlinkOracles(address)'(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpUniswapOracles(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setUpUniswapOracles(address)'(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUp_USDC_ETH_oracles(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setUp_USDC_ETH_oracles(address)'(
      priceOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDefaultStrategy(
      creditLine: string,
      noYield: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateDefaultStrategy(address,address)'(
      creditLine: string,
      noYield: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePooledCLSavingsAccount(
      pooledCreditLineAddress: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updatePooledCLSavingsAccount(address,address)'(
      pooledCreditLineAddress: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSavingsAccount(
      creditLine: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateSavingsAccount(address,address)'(
      creditLine: string,
      savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStrategy(
      strategyRegistry: string,
      index: BigNumberish,
      oldStrategy: string,
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateStrategy(address,uint256,address,address)'(
      strategyRegistry: string,
      index: BigNumberish,
      oldStrategy: string,
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface PoolInterface extends ethers.utils.Interface {
  functions: {
    'addCollateralInMarginCall(address,uint256,bool)': FunctionFragment;
    'beforeTransfer(address,address,uint256)': FunctionFragment;
    'borrower()': FunctionFragment;
    'calculateCollateralRatio(uint256,uint256)': FunctionFragment;
    'calculateCurrentPeriod()': FunctionFragment;
    'cancelPool()': FunctionFragment;
    'closeLoan()': FunctionFragment;
    'correspondingBorrowTokens(uint256,address,uint256)': FunctionFragment;
    'depositCollateral(uint256,bool)': FunctionFragment;
    'getBalanceDetails(address)': FunctionFragment;
    'getCurrentCollateralRatio(address)': FunctionFragment;
    'getEquivalentTokens(address,address,uint256)': FunctionFragment;
    'getLoanStatus()': FunctionFragment;
    'getMarginCallEndTime(address)': FunctionFragment;
    'getTotalSupply()': FunctionFragment;
    'initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,address,uint256,bool,uint256,uint256)': FunctionFragment;
    'interestPerPeriod(uint256)': FunctionFragment;
    'interestPerSecond(uint256)': FunctionFragment;
    'interestTillNow()': FunctionFragment;
    'lend(address,uint256,bool)': FunctionFragment;
    'lenders(address)': FunctionFragment;
    'liquidateCancelPenality(bool,bool)': FunctionFragment;
    'liquidateLender(address,bool,bool,bool)': FunctionFragment;
    'liquidatePool(bool,bool,bool)': FunctionFragment;
    'poolConstants()': FunctionFragment;
    'poolToken()': FunctionFragment;
    'poolVars()': FunctionFragment;
    'requestMarginCall()': FunctionFragment;
    'setPoolToken(address)': FunctionFragment;
    'terminateOpenBorrowPool()': FunctionFragment;
    'withdrawBorrowedAmount()': FunctionFragment;
    'withdrawLiquidity()': FunctionFragment;
    'withdrawRepayment()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addCollateralInMarginCall', values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'beforeTransfer', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'borrower', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateCollateralRatio', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateCurrentPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cancelPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'closeLoan', values?: undefined): string;
  encodeFunctionData(functionFragment: 'correspondingBorrowTokens', values: [BigNumberish, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositCollateral', values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'getBalanceDetails', values: [string]): string;
  encodeFunctionData(functionFragment: 'getCurrentCollateralRatio', values: [string]): string;
  encodeFunctionData(functionFragment: 'getEquivalentTokens', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getLoanStatus', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMarginCallEndTime', values: [string]): string;
  encodeFunctionData(functionFragment: 'getTotalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: 'interestPerPeriod', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'interestPerSecond', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'interestTillNow', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lend', values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'lenders', values: [string]): string;
  encodeFunctionData(functionFragment: 'liquidateCancelPenality', values: [boolean, boolean]): string;
  encodeFunctionData(functionFragment: 'liquidateLender', values: [string, boolean, boolean, boolean]): string;
  encodeFunctionData(functionFragment: 'liquidatePool', values: [boolean, boolean, boolean]): string;
  encodeFunctionData(functionFragment: 'poolConstants', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolVars', values?: undefined): string;
  encodeFunctionData(functionFragment: 'requestMarginCall', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setPoolToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'terminateOpenBorrowPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawBorrowedAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawLiquidity', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawRepayment', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addCollateralInMarginCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'beforeTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateCurrentPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'correspondingBorrowTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBalanceDetails', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEquivalentTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoanStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarginCallEndTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestPerPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestTillNow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lend', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lenders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateCancelPenality', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateLender', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolConstants', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolVars', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestMarginCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'terminateOpenBorrowPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawBorrowedAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawRepayment', data: BytesLike): Result;

  events: {
    'AmountBorrowed(uint256)': EventFragment;
    'CollateralAdded(address,uint256,uint256)': EventFragment;
    'CollateralWithdrawn(address,uint256)': EventFragment;
    'LenderLiquidated(address,address,uint256)': EventFragment;
    'LiquiditySupplied(uint256,address)': EventFragment;
    'LiquidityWithdrawn(uint256,address)': EventFragment;
    'MarginCallCollateralAdded(address,address,uint256,uint256)': EventFragment;
    'MarginCalled(address)': EventFragment;
    'OpenBorrowPoolCancelled()': EventFragment;
    'OpenBorrowPoolClosed()': EventFragment;
    'OpenBorrowPoolTerminated()': EventFragment;
    'PoolLiquidated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AmountBorrowed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LenderLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquiditySupplied'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarginCallCollateralAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarginCalled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OpenBorrowPoolCancelled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OpenBorrowPoolClosed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OpenBorrowPoolTerminated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolLiquidated'): EventFragment;
}

export class Pool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolInterface;

  functions: {
    addCollateralInMarginCall(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'beforeTransfer(address,address,uint256)'(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrower(overrides?: CallOverrides): Promise<[string]>;

    'borrower()'(overrides?: CallOverrides): Promise<[string]>;

    calculateCollateralRatio(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'calculateCollateralRatio(uint256,uint256)'(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateCurrentPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    'calculateCurrentPeriod()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'cancelPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    closeLoan(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'closeLoan()'(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    correspondingBorrowTokens(
      _totalCollateralTokens: BigNumberish,
      _poolFactory: string,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'correspondingBorrowTokens(uint256,address,uint256)'(
      _totalCollateralTokens: BigNumberish,
      _poolFactory: string,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositCollateral(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getCurrentCollateralRatio(address)'(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'getCurrentCollateralRatio()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getEquivalentTokens(_source: string, _target: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getEquivalentTokens(address,address,uint256)'(
      _source: string,
      _target: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLoanStatus(overrides?: CallOverrides): Promise<[BigNumber]>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarginCallEndTime(_lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getMarginCallEndTime(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    'getTotalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _borrowAmountRequested: BigNumberish,
      _minborrowAmount: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _borrowRate: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,address,uint256,bool,uint256,uint256)'(
      _borrowAmountRequested: BigNumberish,
      _minborrowAmount: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _borrowRate: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestPerPeriod(_balance: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'interestPerPeriod(uint256)'(_balance: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    interestPerSecond(_principal: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'interestPerSecond(uint256)'(_principal: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    interestTillNow(overrides?: CallOverrides): Promise<[BigNumber]>;

    'interestTillNow()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    lend(
      _lender: string,
      _amountLent: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'lend(address,uint256,bool)'(
      _lender: string,
      _amountLent: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lenders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        principalWithdrawn: BigNumber;
        interestWithdrawn: BigNumber;
        lastVoteTime: BigNumber;
        marginCallEndTime: BigNumber;
        extraLiquidityShares: BigNumber;
      }
    >;

    'lenders(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        principalWithdrawn: BigNumber;
        interestWithdrawn: BigNumber;
        lastVoteTime: BigNumber;
        marginCallEndTime: BigNumber;
        extraLiquidityShares: BigNumber;
      }
    >;

    liquidateCancelPenality(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'liquidateCancelPenality(bool,bool)'(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateLender(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'liquidateLender(address,bool,bool,bool)'(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidatePool(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'liquidatePool(bool,bool,bool)'(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolConstants(overrides?: CallOverrides): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
        borrower: string;
        borrowAmountRequested: BigNumber;
        minborrowAmount: BigNumber;
        loanStartTime: BigNumber;
        loanWithdrawalDeadline: BigNumber;
        borrowAsset: string;
        idealCollateralRatio: BigNumber;
        borrowRate: BigNumber;
        noOfRepaymentIntervals: BigNumber;
        repaymentInterval: BigNumber;
        collateralAsset: string;
        poolSavingsStrategy: string;
      }
    >;

    'poolConstants()'(overrides?: CallOverrides): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
        borrower: string;
        borrowAmountRequested: BigNumber;
        minborrowAmount: BigNumber;
        loanStartTime: BigNumber;
        loanWithdrawalDeadline: BigNumber;
        borrowAsset: string;
        idealCollateralRatio: BigNumber;
        borrowRate: BigNumber;
        noOfRepaymentIntervals: BigNumber;
        repaymentInterval: BigNumber;
        collateralAsset: string;
        poolSavingsStrategy: string;
      }
    >;

    poolToken(overrides?: CallOverrides): Promise<[string]>;

    'poolToken()'(overrides?: CallOverrides): Promise<[string]>;

    poolVars(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        baseLiquidityShares: BigNumber;
        extraLiquidityShares: BigNumber;
        loanStatus: number;
        penalityLiquidityAmount: BigNumber;
      }
    >;

    'poolVars()'(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        baseLiquidityShares: BigNumber;
        extraLiquidityShares: BigNumber;
        loanStatus: number;
        penalityLiquidityAmount: BigNumber;
      }
    >;

    requestMarginCall(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'requestMarginCall()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setPoolToken(_poolToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'setPoolToken(address)'(_poolToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    terminateOpenBorrowPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'terminateOpenBorrowPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawLiquidity(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'withdrawLiquidity()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawRepayment(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'withdrawRepayment()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  addCollateralInMarginCall(
    _lender: string,
    _amount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'addCollateralInMarginCall(address,uint256,bool)'(
    _lender: string,
    _amount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeTransfer(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'beforeTransfer(address,address,uint256)'(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrower(overrides?: CallOverrides): Promise<string>;

  'borrower()'(overrides?: CallOverrides): Promise<string>;

  calculateCollateralRatio(
    _balance: BigNumberish,
    _liquidityShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'calculateCollateralRatio(uint256,uint256)'(
    _balance: BigNumberish,
    _liquidityShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  'calculateCurrentPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

  cancelPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'cancelPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  closeLoan(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'closeLoan()'(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  correspondingBorrowTokens(
    _totalCollateralTokens: BigNumberish,
    _poolFactory: string,
    _fraction: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'correspondingBorrowTokens(uint256,address,uint256)'(
    _totalCollateralTokens: BigNumberish,
    _poolFactory: string,
    _fraction: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositCollateral(
    _amount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'depositCollateral(uint256,bool)'(
    _amount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  'getCurrentCollateralRatio(address)'(
    _lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'getCurrentCollateralRatio()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getEquivalentTokens(_source: string, _target: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'getEquivalentTokens(address,address,uint256)'(
    _source: string,
    _target: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

  'getLoanStatus()'(overrides?: CallOverrides): Promise<BigNumber>;

  getMarginCallEndTime(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getMarginCallEndTime(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'getTotalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _borrowAmountRequested: BigNumberish,
    _minborrowAmount: BigNumberish,
    _borrower: string,
    _borrowAsset: string,
    _collateralAsset: string,
    _idealCollateralRatio: BigNumberish,
    _borrowRate: BigNumberish,
    _repaymentInterval: BigNumberish,
    _noOfRepaymentIntervals: BigNumberish,
    _poolSavingsStrategy: string,
    _collateralAmount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    _loanWithdrawalDuration: BigNumberish,
    _collectionPeriod: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,address,uint256,bool,uint256,uint256)'(
    _borrowAmountRequested: BigNumberish,
    _minborrowAmount: BigNumberish,
    _borrower: string,
    _borrowAsset: string,
    _collateralAsset: string,
    _idealCollateralRatio: BigNumberish,
    _borrowRate: BigNumberish,
    _repaymentInterval: BigNumberish,
    _noOfRepaymentIntervals: BigNumberish,
    _poolSavingsStrategy: string,
    _collateralAmount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    _loanWithdrawalDuration: BigNumberish,
    _collectionPeriod: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestPerPeriod(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'interestPerPeriod(uint256)'(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  interestPerSecond(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'interestPerSecond(uint256)'(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  interestTillNow(overrides?: CallOverrides): Promise<BigNumber>;

  'interestTillNow()'(overrides?: CallOverrides): Promise<BigNumber>;

  lend(
    _lender: string,
    _amountLent: BigNumberish,
    _fromSavingsAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'lend(address,uint256,bool)'(
    _lender: string,
    _amountLent: BigNumberish,
    _fromSavingsAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lenders(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      principalWithdrawn: BigNumber;
      interestWithdrawn: BigNumber;
      lastVoteTime: BigNumber;
      marginCallEndTime: BigNumber;
      extraLiquidityShares: BigNumber;
    }
  >;

  'lenders(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      principalWithdrawn: BigNumber;
      interestWithdrawn: BigNumber;
      lastVoteTime: BigNumber;
      marginCallEndTime: BigNumber;
      extraLiquidityShares: BigNumber;
    }
  >;

  liquidateCancelPenality(
    _toSavingsAccount: boolean,
    _receiveLiquidityShare: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'liquidateCancelPenality(bool,bool)'(
    _toSavingsAccount: boolean,
    _receiveLiquidityShare: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateLender(
    _lender: string,
    _fromSavingsAccount: boolean,
    _toSavingsAccount: boolean,
    _recieveLiquidityShare: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'liquidateLender(address,bool,bool,bool)'(
    _lender: string,
    _fromSavingsAccount: boolean,
    _toSavingsAccount: boolean,
    _recieveLiquidityShare: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidatePool(
    _fromSavingsAccount: boolean,
    _toSavingsAccount: boolean,
    _recieveLiquidityShare: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'liquidatePool(bool,bool,bool)'(
    _fromSavingsAccount: boolean,
    _toSavingsAccount: boolean,
    _recieveLiquidityShare: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolConstants(overrides?: CallOverrides): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
      borrower: string;
      borrowAmountRequested: BigNumber;
      minborrowAmount: BigNumber;
      loanStartTime: BigNumber;
      loanWithdrawalDeadline: BigNumber;
      borrowAsset: string;
      idealCollateralRatio: BigNumber;
      borrowRate: BigNumber;
      noOfRepaymentIntervals: BigNumber;
      repaymentInterval: BigNumber;
      collateralAsset: string;
      poolSavingsStrategy: string;
    }
  >;

  'poolConstants()'(overrides?: CallOverrides): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
      borrower: string;
      borrowAmountRequested: BigNumber;
      minborrowAmount: BigNumber;
      loanStartTime: BigNumber;
      loanWithdrawalDeadline: BigNumber;
      borrowAsset: string;
      idealCollateralRatio: BigNumber;
      borrowRate: BigNumber;
      noOfRepaymentIntervals: BigNumber;
      repaymentInterval: BigNumber;
      collateralAsset: string;
      poolSavingsStrategy: string;
    }
  >;

  poolToken(overrides?: CallOverrides): Promise<string>;

  'poolToken()'(overrides?: CallOverrides): Promise<string>;

  poolVars(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, number, BigNumber] & {
      baseLiquidityShares: BigNumber;
      extraLiquidityShares: BigNumber;
      loanStatus: number;
      penalityLiquidityAmount: BigNumber;
    }
  >;

  'poolVars()'(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, number, BigNumber] & {
      baseLiquidityShares: BigNumber;
      extraLiquidityShares: BigNumber;
      loanStatus: number;
      penalityLiquidityAmount: BigNumber;
    }
  >;

  requestMarginCall(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'requestMarginCall()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setPoolToken(_poolToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'setPoolToken(address)'(_poolToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  terminateOpenBorrowPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'terminateOpenBorrowPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawLiquidity(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'withdrawLiquidity()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawRepayment(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'withdrawRepayment()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    addCollateralInMarginCall(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeTransfer(_from: string, _to: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'beforeTransfer(address,address,uint256)'(_from: string, _to: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    borrower(overrides?: CallOverrides): Promise<string>;

    'borrower()'(overrides?: CallOverrides): Promise<string>;

    calculateCollateralRatio(_balance: BigNumberish, _liquidityShares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCollateralRatio(uint256,uint256)'(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

    cancelPool(overrides?: CallOverrides): Promise<void>;

    'cancelPool()'(overrides?: CallOverrides): Promise<void>;

    closeLoan(overrides?: CallOverrides): Promise<void>;

    'closeLoan()'(overrides?: CallOverrides): Promise<void>;

    correspondingBorrowTokens(
      _totalCollateralTokens: BigNumberish,
      _poolFactory: string,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'correspondingBorrowTokens(uint256,address,uint256)'(
      _totalCollateralTokens: BigNumberish,
      _poolFactory: string,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(_amount: BigNumberish, _transferFromSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getCurrentCollateralRatio(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getCurrentCollateralRatio()'(overrides?: CallOverrides): Promise<BigNumber>;

    getEquivalentTokens(_source: string, _target: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getEquivalentTokens(address,address,uint256)'(
      _source: string,
      _target: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginCallEndTime(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getMarginCallEndTime(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'getTotalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _borrowAmountRequested: BigNumberish,
      _minborrowAmount: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _borrowRate: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,address,uint256,bool,uint256,uint256)'(
      _borrowAmountRequested: BigNumberish,
      _minborrowAmount: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _borrowRate: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    interestPerPeriod(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'interestPerPeriod(uint256)'(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    interestPerSecond(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'interestPerSecond(uint256)'(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    interestTillNow(overrides?: CallOverrides): Promise<BigNumber>;

    'interestTillNow()'(overrides?: CallOverrides): Promise<BigNumber>;

    lend(_lender: string, _amountLent: BigNumberish, _fromSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'lend(address,uint256,bool)'(
      _lender: string,
      _amountLent: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    lenders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        principalWithdrawn: BigNumber;
        interestWithdrawn: BigNumber;
        lastVoteTime: BigNumber;
        marginCallEndTime: BigNumber;
        extraLiquidityShares: BigNumber;
      }
    >;

    'lenders(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        principalWithdrawn: BigNumber;
        interestWithdrawn: BigNumber;
        lastVoteTime: BigNumber;
        marginCallEndTime: BigNumber;
        extraLiquidityShares: BigNumber;
      }
    >;

    liquidateCancelPenality(_toSavingsAccount: boolean, _receiveLiquidityShare: boolean, overrides?: CallOverrides): Promise<void>;

    'liquidateCancelPenality(bool,bool)'(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateLender(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'liquidateLender(address,bool,bool,bool)'(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatePool(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'liquidatePool(bool,bool,bool)'(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    poolConstants(overrides?: CallOverrides): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
        borrower: string;
        borrowAmountRequested: BigNumber;
        minborrowAmount: BigNumber;
        loanStartTime: BigNumber;
        loanWithdrawalDeadline: BigNumber;
        borrowAsset: string;
        idealCollateralRatio: BigNumber;
        borrowRate: BigNumber;
        noOfRepaymentIntervals: BigNumber;
        repaymentInterval: BigNumber;
        collateralAsset: string;
        poolSavingsStrategy: string;
      }
    >;

    'poolConstants()'(overrides?: CallOverrides): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
        borrower: string;
        borrowAmountRequested: BigNumber;
        minborrowAmount: BigNumber;
        loanStartTime: BigNumber;
        loanWithdrawalDeadline: BigNumber;
        borrowAsset: string;
        idealCollateralRatio: BigNumber;
        borrowRate: BigNumber;
        noOfRepaymentIntervals: BigNumber;
        repaymentInterval: BigNumber;
        collateralAsset: string;
        poolSavingsStrategy: string;
      }
    >;

    poolToken(overrides?: CallOverrides): Promise<string>;

    'poolToken()'(overrides?: CallOverrides): Promise<string>;

    poolVars(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        baseLiquidityShares: BigNumber;
        extraLiquidityShares: BigNumber;
        loanStatus: number;
        penalityLiquidityAmount: BigNumber;
      }
    >;

    'poolVars()'(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        baseLiquidityShares: BigNumber;
        extraLiquidityShares: BigNumber;
        loanStatus: number;
        penalityLiquidityAmount: BigNumber;
      }
    >;

    requestMarginCall(overrides?: CallOverrides): Promise<void>;

    'requestMarginCall()'(overrides?: CallOverrides): Promise<void>;

    setPoolToken(_poolToken: string, overrides?: CallOverrides): Promise<void>;

    'setPoolToken(address)'(_poolToken: string, overrides?: CallOverrides): Promise<void>;

    terminateOpenBorrowPool(overrides?: CallOverrides): Promise<void>;

    'terminateOpenBorrowPool()'(overrides?: CallOverrides): Promise<void>;

    withdrawBorrowedAmount(overrides?: CallOverrides): Promise<void>;

    'withdrawBorrowedAmount()'(overrides?: CallOverrides): Promise<void>;

    withdrawLiquidity(overrides?: CallOverrides): Promise<void>;

    'withdrawLiquidity()'(overrides?: CallOverrides): Promise<void>;

    withdrawRepayment(overrides?: CallOverrides): Promise<void>;

    'withdrawRepayment()'(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AmountBorrowed(amount: null): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    CollateralAdded(
      borrower: null,
      amount: null,
      sharesReceived: null
    ): TypedEventFilter<[string, BigNumber, BigNumber], { borrower: string; amount: BigNumber; sharesReceived: BigNumber }>;

    CollateralWithdrawn(borrower: null, amount: null): TypedEventFilter<[string, BigNumber], { borrower: string; amount: BigNumber }>;

    LenderLiquidated(
      liquidator: null,
      lender: null,
      _tokenReceived: null
    ): TypedEventFilter<[string, string, BigNumber], { liquidator: string; lender: string; _tokenReceived: BigNumber }>;

    LiquiditySupplied(
      amountSupplied: null,
      lenderAddress: null
    ): TypedEventFilter<[BigNumber, string], { amountSupplied: BigNumber; lenderAddress: string }>;

    LiquidityWithdrawn(
      amount: null,
      lenderAddress: null
    ): TypedEventFilter<[BigNumber, string], { amount: BigNumber; lenderAddress: string }>;

    MarginCallCollateralAdded(
      borrower: null,
      lender: null,
      amount: null,
      sharesReceived: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        borrower: string;
        lender: string;
        amount: BigNumber;
        sharesReceived: BigNumber;
      }
    >;

    MarginCalled(lenderAddress: null): TypedEventFilter<[string], { lenderAddress: string }>;

    OpenBorrowPoolCancelled(): TypedEventFilter<[], {}>;

    OpenBorrowPoolClosed(): TypedEventFilter<[], {}>;

    OpenBorrowPoolTerminated(): TypedEventFilter<[], {}>;

    PoolLiquidated(liquidator: null): TypedEventFilter<[string], { liquidator: string }>;
  };

  estimateGas: {
    addCollateralInMarginCall(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'beforeTransfer(address,address,uint256)'(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<BigNumber>;

    'borrower()'(overrides?: CallOverrides): Promise<BigNumber>;

    calculateCollateralRatio(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'calculateCollateralRatio(uint256,uint256)'(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

    cancelPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'cancelPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    closeLoan(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'closeLoan()'(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    correspondingBorrowTokens(
      _totalCollateralTokens: BigNumberish,
      _poolFactory: string,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'correspondingBorrowTokens(uint256,address,uint256)'(
      _totalCollateralTokens: BigNumberish,
      _poolFactory: string,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getCurrentCollateralRatio(address)'(_lender: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'getCurrentCollateralRatio()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getEquivalentTokens(_source: string, _target: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getEquivalentTokens(address,address,uint256)'(
      _source: string,
      _target: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginCallEndTime(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getMarginCallEndTime(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'getTotalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _borrowAmountRequested: BigNumberish,
      _minborrowAmount: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _borrowRate: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,address,uint256,bool,uint256,uint256)'(
      _borrowAmountRequested: BigNumberish,
      _minborrowAmount: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _borrowRate: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestPerPeriod(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'interestPerPeriod(uint256)'(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    interestPerSecond(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'interestPerSecond(uint256)'(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    interestTillNow(overrides?: CallOverrides): Promise<BigNumber>;

    'interestTillNow()'(overrides?: CallOverrides): Promise<BigNumber>;

    lend(
      _lender: string,
      _amountLent: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'lend(address,uint256,bool)'(
      _lender: string,
      _amountLent: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lenders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'lenders(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidateCancelPenality(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'liquidateCancelPenality(bool,bool)'(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateLender(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'liquidateLender(address,bool,bool,bool)'(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidatePool(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'liquidatePool(bool,bool,bool)'(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolConstants(overrides?: CallOverrides): Promise<BigNumber>;

    'poolConstants()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(overrides?: CallOverrides): Promise<BigNumber>;

    'poolToken()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolVars(overrides?: CallOverrides): Promise<BigNumber>;

    'poolVars()'(overrides?: CallOverrides): Promise<BigNumber>;

    requestMarginCall(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'requestMarginCall()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPoolToken(_poolToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setPoolToken(address)'(_poolToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    terminateOpenBorrowPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'terminateOpenBorrowPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawLiquidity(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawLiquidity()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawRepayment(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawRepayment()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateralInMarginCall(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'beforeTransfer(address,address,uint256)'(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'borrower()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateCollateralRatio(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateCollateralRatio(uint256,uint256)'(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateCurrentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'calculateCurrentPeriod()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'cancelPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    closeLoan(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'closeLoan()'(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    correspondingBorrowTokens(
      _totalCollateralTokens: BigNumberish,
      _poolFactory: string,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'correspondingBorrowTokens(uint256,address,uint256)'(
      _totalCollateralTokens: BigNumberish,
      _poolFactory: string,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getCurrentCollateralRatio(address)'(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'getCurrentCollateralRatio()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getEquivalentTokens(_source: string, _target: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getEquivalentTokens(address,address,uint256)'(
      _source: string,
      _target: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarginCallEndTime(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getMarginCallEndTime(address)'(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getTotalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _borrowAmountRequested: BigNumberish,
      _minborrowAmount: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _borrowRate: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,address,uint256,bool,uint256,uint256)'(
      _borrowAmountRequested: BigNumberish,
      _minborrowAmount: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _borrowRate: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestPerPeriod(_balance: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'interestPerPeriod(uint256)'(_balance: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestPerSecond(_principal: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'interestPerSecond(uint256)'(_principal: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestTillNow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'interestTillNow()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lend(
      _lender: string,
      _amountLent: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'lend(address,uint256,bool)'(
      _lender: string,
      _amountLent: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lenders(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lenders(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateCancelPenality(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'liquidateCancelPenality(bool,bool)'(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateLender(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'liquidateLender(address,bool,bool,bool)'(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidatePool(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'liquidatePool(bool,bool,bool)'(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolConstants()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolVars(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolVars()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestMarginCall(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'requestMarginCall()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setPoolToken(_poolToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'setPoolToken(address)'(_poolToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    terminateOpenBorrowPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'terminateOpenBorrowPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawLiquidity(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'withdrawLiquidity()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawRepayment(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'withdrawRepayment()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}

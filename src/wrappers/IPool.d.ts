/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface IPoolInterface extends ethers.utils.Interface {
  functions: {
    'addCollateralInMarginCall(address,uint256,bool)': FunctionFragment;
    'beforeTransfer(address,address,uint256)': FunctionFragment;
    'borrower()': FunctionFragment;
    'closeLoan()': FunctionFragment;
    'depositCollateral(uint256,bool)': FunctionFragment;
    'getBalanceDetails(address)': FunctionFragment;
    'getLoanStatus()': FunctionFragment;
    'getMarginCallEndTime(address)': FunctionFragment;
    'getTokensLent()': FunctionFragment;
    'setConstants(address,address)': FunctionFragment;
    'withdrawBorrowedAmount()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addCollateralInMarginCall', values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'beforeTransfer', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'borrower', values?: undefined): string;
  encodeFunctionData(functionFragment: 'closeLoan', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositCollateral', values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'getBalanceDetails', values: [string]): string;
  encodeFunctionData(functionFragment: 'getLoanStatus', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMarginCallEndTime', values: [string]): string;
  encodeFunctionData(functionFragment: 'getTokensLent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setConstants', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'withdrawBorrowedAmount', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addCollateralInMarginCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'beforeTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBalanceDetails', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoanStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarginCallEndTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokensLent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setConstants', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawBorrowedAmount', data: BytesLike): Result;

  events: {};
}

export class IPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolInterface;

  functions: {
    addCollateralInMarginCall(
      _lender: string,
      _amount: BigNumberish,
      _isDirect: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _isDirect: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'beforeTransfer(address,address,uint256)'(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrower(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'borrower()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    closeLoan(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'closeLoan()'(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    depositCollateral(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getLoanStatus(overrides?: CallOverrides): Promise<[BigNumber]>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarginCallEndTime(_lender: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'getMarginCallEndTime(address)'(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokensLent(overrides?: CallOverrides): Promise<[BigNumber]>;

    'getTokensLent()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    setConstants(
      _poolToken: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setConstants(address,address)'(
      _poolToken: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  addCollateralInMarginCall(
    _lender: string,
    _amount: BigNumberish,
    _isDirect: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'addCollateralInMarginCall(address,uint256,bool)'(
    _lender: string,
    _amount: BigNumberish,
    _isDirect: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeTransfer(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'beforeTransfer(address,address,uint256)'(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrower(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'borrower()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  closeLoan(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'closeLoan()'(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  depositCollateral(
    _amount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'depositCollateral(uint256,bool)'(
    _amount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

  'getLoanStatus()'(overrides?: CallOverrides): Promise<BigNumber>;

  getMarginCallEndTime(_lender: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'getMarginCallEndTime(address)'(
    _lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokensLent(overrides?: CallOverrides): Promise<BigNumber>;

  'getTokensLent()'(overrides?: CallOverrides): Promise<BigNumber>;

  setConstants(
    _poolToken: string,
    _lenderVerifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setConstants(address,address)'(
    _poolToken: string,
    _lenderVerifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    addCollateralInMarginCall(_lender: string, _amount: BigNumberish, _isDirect: boolean, overrides?: CallOverrides): Promise<void>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _isDirect: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeTransfer(_from: string, _to: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'beforeTransfer(address,address,uint256)'(_from: string, _to: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    borrower(overrides?: CallOverrides): Promise<string>;

    'borrower()'(overrides?: CallOverrides): Promise<string>;

    closeLoan(overrides?: CallOverrides): Promise<void>;

    'closeLoan()'(overrides?: CallOverrides): Promise<void>;

    depositCollateral(_amount: BigNumberish, _transferFromSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginCallEndTime(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getMarginCallEndTime(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensLent(overrides?: CallOverrides): Promise<BigNumber>;

    'getTokensLent()'(overrides?: CallOverrides): Promise<BigNumber>;

    setConstants(_poolToken: string, _lenderVerifier: string, overrides?: CallOverrides): Promise<void>;

    'setConstants(address,address)'(_poolToken: string, _lenderVerifier: string, overrides?: CallOverrides): Promise<void>;

    withdrawBorrowedAmount(overrides?: CallOverrides): Promise<void>;

    'withdrawBorrowedAmount()'(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addCollateralInMarginCall(
      _lender: string,
      _amount: BigNumberish,
      _isDirect: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _isDirect: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'beforeTransfer(address,address,uint256)'(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrower(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'borrower()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    closeLoan(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'closeLoan()'(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    depositCollateral(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginCallEndTime(_lender: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'getMarginCallEndTime(address)'(_lender: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getTokensLent(overrides?: CallOverrides): Promise<BigNumber>;

    'getTokensLent()'(overrides?: CallOverrides): Promise<BigNumber>;

    setConstants(
      _poolToken: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setConstants(address,address)'(
      _poolToken: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateralInMarginCall(
      _lender: string,
      _amount: BigNumberish,
      _isDirect: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _isDirect: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'beforeTransfer(address,address,uint256)'(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrower(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'borrower()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    closeLoan(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'closeLoan()'(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    depositCollateral(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLoanStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarginCallEndTime(_lender: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'getMarginCallEndTime(address)'(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokensLent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getTokensLent()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setConstants(
      _poolToken: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setConstants(address,address)'(
      _poolToken: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}

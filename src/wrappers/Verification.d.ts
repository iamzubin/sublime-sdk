/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface VerificationInterface extends ethers.utils.Interface {
  functions: {
    'initialize(address)': FunctionFragment;
    'isUser(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'registerUser(address,bytes32)': FunctionFragment;
    'registeredUsers(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unregisterUser(address)': FunctionFragment;
    'updateUserDetails(address,bytes32)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'initialize', values: [string]): string;
  encodeFunctionData(functionFragment: 'isUser', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'registerUser', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'registeredUsers', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unregisterUser', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateUserDetails', values: [string, BytesLike]): string;

  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registeredUsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unregisterUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateUserDetails', data: BytesLike): Result;

  events: {
    'AmountBorrowed(bytes32,address,uint256,uint256)': EventFragment;
    'CollateralAdded(bytes32,uint256)': EventFragment;
    'CollateralWithdrawn(bytes32,address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'UserDetailsUpdated(address,bytes32)': EventFragment;
    'UserRegistered(address,bytes32)': EventFragment;
    'UserUnregistered(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AmountBorrowed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserDetailsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserRegistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserUnregistered'): EventFragment;
}

export class Verification extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VerificationInterface;

  functions: {
    initialize(_admin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'initialize(address)'(_admin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    isUser(_user: string, overrides?: CallOverrides): Promise<[boolean]>;

    'isUser(address)'(_user: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    registerUser(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'registerUser(address,bytes32)'(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredUsers(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    'registeredUsers(address)'(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterUser(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'unregisterUser(address)'(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    updateUserDetails(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateUserDetails(address,bytes32)'(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  initialize(_admin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'initialize(address)'(_admin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  isUser(_user: string, overrides?: CallOverrides): Promise<boolean>;

  'isUser(address)'(_user: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  registerUser(
    _user: string,
    _offChainDetails: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'registerUser(address,bytes32)'(
    _user: string,
    _offChainDetails: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredUsers(arg0: string, overrides?: CallOverrides): Promise<string>;

  'registeredUsers(address)'(arg0: string, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  unregisterUser(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'unregisterUser(address)'(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  updateUserDetails(
    _user: string,
    _offChainDetails: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateUserDetails(address,bytes32)'(
    _user: string,
    _offChainDetails: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initialize(_admin: string, overrides?: CallOverrides): Promise<void>;

    'initialize(address)'(_admin: string, overrides?: CallOverrides): Promise<void>;

    isUser(_user: string, overrides?: CallOverrides): Promise<boolean>;

    'isUser(address)'(_user: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    registerUser(_user: string, _offChainDetails: BytesLike, overrides?: CallOverrides): Promise<void>;

    'registerUser(address,bytes32)'(_user: string, _offChainDetails: BytesLike, overrides?: CallOverrides): Promise<void>;

    registeredUsers(arg0: string, overrides?: CallOverrides): Promise<string>;

    'registeredUsers(address)'(arg0: string, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unregisterUser(_user: string, overrides?: CallOverrides): Promise<void>;

    'unregisterUser(address)'(_user: string, overrides?: CallOverrides): Promise<void>;

    updateUserDetails(_user: string, _offChainDetails: BytesLike, overrides?: CallOverrides): Promise<void>;

    'updateUserDetails(address,bytes32)'(_user: string, _offChainDetails: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AmountBorrowed(
      poolHash: null,
      user: null,
      amount: null,
      time: null
    ): TypedEventFilter<[string, string, BigNumber, BigNumber], { poolHash: string; user: string; amount: BigNumber; time: BigNumber }>;

    CollateralAdded(poolHash: null, amount: null): TypedEventFilter<[string, BigNumber], { poolHash: string; amount: BigNumber }>;

    CollateralWithdrawn(
      poolHash: null,
      user: null,
      amount: null
    ): TypedEventFilter<[string, string, BigNumber], { poolHash: string; user: string; amount: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    UserDetailsUpdated(user: null, offChainDetails: null): TypedEventFilter<[string, string], { user: string; offChainDetails: string }>;

    UserRegistered(user: null, offChainDetails: null): TypedEventFilter<[string, string], { user: string; offChainDetails: string }>;

    UserUnregistered(user: null): TypedEventFilter<[string], { user: string }>;
  };

  estimateGas: {
    initialize(_admin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'initialize(address)'(_admin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    isUser(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isUser(address)'(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    registerUser(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'registerUser(address,bytes32)'(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredUsers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'registeredUsers(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    unregisterUser(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'unregisterUser(address)'(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateUserDetails(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateUserDetails(address,bytes32)'(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(_admin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'initialize(address)'(_admin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    isUser(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isUser(address)'(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerUser(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'registerUser(address,bytes32)'(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredUsers(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'registeredUsers(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterUser(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'unregisterUser(address)'(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    updateUserDetails(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateUserDetails(address,bytes32)'(
      _user: string,
      _offChainDetails: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

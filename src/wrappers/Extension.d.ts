/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface ExtensionInterface extends ethers.utils.Interface {
  functions: {
    'closePoolExtension()': FunctionFragment;
    'initialize(address,uint256)': FunctionFragment;
    'initializePoolExtension(uint256)': FunctionFragment;
    'poolInfo(address)': FunctionFragment;
    'requestExtension(address)': FunctionFragment;
    'updatePoolFactory(address)': FunctionFragment;
    'updateVotingPassRatio(uint256)': FunctionFragment;
    'voteOnExtension(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'closePoolExtension', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initializePoolExtension', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'poolInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'requestExtension', values: [string]): string;
  encodeFunctionData(functionFragment: 'updatePoolFactory', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateVotingPassRatio', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'voteOnExtension', values: [string]): string;

  decodeFunctionResult(functionFragment: 'closePoolExtension', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializePoolExtension', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestExtension', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePoolFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateVotingPassRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voteOnExtension', data: BytesLike): Result;

  events: {
    'ExtensionPassed(uint256)': EventFragment;
    'ExtensionRequested(uint256)': EventFragment;
    'LenderVoted(address,uint256,uint256)': EventFragment;
    'PoolFactoryUpdated(address)': EventFragment;
    'VotingPassRatioUpdated(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ExtensionPassed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExtensionRequested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LenderVoted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolFactoryUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VotingPassRatioUpdated'): EventFragment;
}

export class Extension extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ExtensionInterface;

  functions: {
    closePoolExtension(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'closePoolExtension()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    initialize(
      _poolFactory: string,
      _votingPassRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(address,uint256)'(
      _poolFactory: string,
      _votingPassRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePoolExtension(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initializePoolExtension(uint256)'(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodWhenExtensionIsPassed: BigNumber;
        totalExtensionSupport: BigNumber;
        extensionVoteEndTime: BigNumber;
        repaymentInterval: BigNumber;
      }
    >;

    'poolInfo(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodWhenExtensionIsPassed: BigNumber;
        totalExtensionSupport: BigNumber;
        extensionVoteEndTime: BigNumber;
        repaymentInterval: BigNumber;
      }
    >;

    requestExtension(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'requestExtension(address)'(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    updatePoolFactory(_poolFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'updatePoolFactory(address)'(
      _poolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVotingPassRatio(
      _votingPassRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateVotingPassRatio(uint256)'(
      _votingPassRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteOnExtension(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'voteOnExtension(address)'(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  closePoolExtension(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'closePoolExtension()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  initialize(
    _poolFactory: string,
    _votingPassRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(address,uint256)'(
    _poolFactory: string,
    _votingPassRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePoolExtension(
    _repaymentInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initializePoolExtension(uint256)'(
    _repaymentInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      periodWhenExtensionIsPassed: BigNumber;
      totalExtensionSupport: BigNumber;
      extensionVoteEndTime: BigNumber;
      repaymentInterval: BigNumber;
    }
  >;

  'poolInfo(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      periodWhenExtensionIsPassed: BigNumber;
      totalExtensionSupport: BigNumber;
      extensionVoteEndTime: BigNumber;
      repaymentInterval: BigNumber;
    }
  >;

  requestExtension(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'requestExtension(address)'(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  updatePoolFactory(_poolFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'updatePoolFactory(address)'(
    _poolFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVotingPassRatio(
    _votingPassRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateVotingPassRatio(uint256)'(
    _votingPassRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteOnExtension(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'voteOnExtension(address)'(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    closePoolExtension(overrides?: CallOverrides): Promise<void>;

    'closePoolExtension()'(overrides?: CallOverrides): Promise<void>;

    initialize(_poolFactory: string, _votingPassRatio: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'initialize(address,uint256)'(_poolFactory: string, _votingPassRatio: BigNumberish, overrides?: CallOverrides): Promise<void>;

    initializePoolExtension(_repaymentInterval: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'initializePoolExtension(uint256)'(_repaymentInterval: BigNumberish, overrides?: CallOverrides): Promise<void>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodWhenExtensionIsPassed: BigNumber;
        totalExtensionSupport: BigNumber;
        extensionVoteEndTime: BigNumber;
        repaymentInterval: BigNumber;
      }
    >;

    'poolInfo(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodWhenExtensionIsPassed: BigNumber;
        totalExtensionSupport: BigNumber;
        extensionVoteEndTime: BigNumber;
        repaymentInterval: BigNumber;
      }
    >;

    requestExtension(_pool: string, overrides?: CallOverrides): Promise<void>;

    'requestExtension(address)'(_pool: string, overrides?: CallOverrides): Promise<void>;

    updatePoolFactory(_poolFactory: string, overrides?: CallOverrides): Promise<void>;

    'updatePoolFactory(address)'(_poolFactory: string, overrides?: CallOverrides): Promise<void>;

    updateVotingPassRatio(_votingPassRatio: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateVotingPassRatio(uint256)'(_votingPassRatio: BigNumberish, overrides?: CallOverrides): Promise<void>;

    voteOnExtension(_pool: string, overrides?: CallOverrides): Promise<void>;

    'voteOnExtension(address)'(_pool: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ExtensionPassed(loanInterval: null): TypedEventFilter<[BigNumber], { loanInterval: BigNumber }>;

    ExtensionRequested(extensionVoteEndTime: null): TypedEventFilter<[BigNumber], { extensionVoteEndTime: BigNumber }>;

    LenderVoted(
      lender: null,
      totalExtensionSupport: null,
      lastVoteTime: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        lender: string;
        totalExtensionSupport: BigNumber;
        lastVoteTime: BigNumber;
      }
    >;

    PoolFactoryUpdated(poolFactory: null): TypedEventFilter<[string], { poolFactory: string }>;

    VotingPassRatioUpdated(votingPassRatio: null): TypedEventFilter<[BigNumber], { votingPassRatio: BigNumber }>;
  };

  estimateGas: {
    closePoolExtension(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'closePoolExtension()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    initialize(
      _poolFactory: string,
      _votingPassRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(address,uint256)'(
      _poolFactory: string,
      _votingPassRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePoolExtension(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initializePoolExtension(uint256)'(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'poolInfo(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    requestExtension(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'requestExtension(address)'(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updatePoolFactory(_poolFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updatePoolFactory(address)'(_poolFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateVotingPassRatio(_votingPassRatio: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateVotingPassRatio(uint256)'(
      _votingPassRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteOnExtension(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'voteOnExtension(address)'(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    closePoolExtension(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'closePoolExtension()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    initialize(
      _poolFactory: string,
      _votingPassRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(address,uint256)'(
      _poolFactory: string,
      _votingPassRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePoolExtension(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initializePoolExtension(uint256)'(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolInfo(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolInfo(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestExtension(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'requestExtension(address)'(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    updatePoolFactory(_poolFactory: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'updatePoolFactory(address)'(
      _poolFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVotingPassRatio(
      _votingPassRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateVotingPassRatio(uint256)'(
      _votingPassRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteOnExtension(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'voteOnExtension(address)'(_pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}

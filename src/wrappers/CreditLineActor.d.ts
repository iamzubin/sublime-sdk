/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface CreditLineActorInterface extends ethers.utils.Interface {
  functions: {
    'acceptRequest(address,uint256)': FunctionFragment;
    'addCollateral(address,uint256,uint256,bool)': FunctionFragment;
    'borrow(address,uint256,uint256)': FunctionFragment;
    'close(address,uint256)': FunctionFragment;
    'createRequest(address,address,uint256,uint256,bool,uint256,address,address,address,bool)': FunctionFragment;
    'liquidate(address,uint256,bool)': FunctionFragment;
    'repay(address,uint256,uint256)': FunctionFragment;
    'withdrawCollateral(address,uint256,uint256,bool)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'acceptRequest', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'addCollateral', values: [string, BigNumberish, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'borrow', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'close', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'createRequest',
    values: [string, string, BigNumberish, BigNumberish, boolean, BigNumberish, string, string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: 'liquidate', values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'repay', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawCollateral', values: [string, BigNumberish, BigNumberish, boolean]): string;

  decodeFunctionResult(functionFragment: 'acceptRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'close', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCollateral', data: BytesLike): Result;

  events: {};
}

export class CreditLineActor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CreditLineActorInterface;

  functions: {
    acceptRequest(
      creditLineAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'acceptRequest(address,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCollateral(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'addCollateral(address,uint256,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'borrow(address,uint256,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    close(
      creditLineAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'close(address,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createRequest(
      creditLineAddress: string,
      receiver: string,
      borrowLimit: BigNumberish,
      borrowRate: BigNumberish,
      autoLiquidation: boolean,
      collateralRatio: BigNumberish,
      borrowAsset: string,
      collateralAsset: string,
      collateralStrategy: string,
      requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'createRequest(address,address,uint256,uint256,bool,uint256,address,address,address,bool)'(
      creditLineAddress: string,
      receiver: string,
      borrowLimit: BigNumberish,
      borrowRate: BigNumberish,
      autoLiquidation: boolean,
      collateralRatio: BigNumberish,
      borrowAsset: string,
      collateralAsset: string,
      collateralStrategy: string,
      requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      creditLineAddress: string,
      id: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'liquidate(address,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'repay(address,uint256,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawCollateral(address,uint256,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptRequest(
    creditLineAddress: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'acceptRequest(address,uint256)'(
    creditLineAddress: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCollateral(
    creditLineAddress: string,
    id: BigNumberish,
    amount: BigNumberish,
    fromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'addCollateral(address,uint256,uint256,bool)'(
    creditLineAddress: string,
    id: BigNumberish,
    amount: BigNumberish,
    fromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    creditLineAddress: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'borrow(address,uint256,uint256)'(
    creditLineAddress: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  close(
    creditLineAddress: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'close(address,uint256)'(
    creditLineAddress: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createRequest(
    creditLineAddress: string,
    receiver: string,
    borrowLimit: BigNumberish,
    borrowRate: BigNumberish,
    autoLiquidation: boolean,
    collateralRatio: BigNumberish,
    borrowAsset: string,
    collateralAsset: string,
    collateralStrategy: string,
    requestAsLender: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'createRequest(address,address,uint256,uint256,bool,uint256,address,address,address,bool)'(
    creditLineAddress: string,
    receiver: string,
    borrowLimit: BigNumberish,
    borrowRate: BigNumberish,
    autoLiquidation: boolean,
    collateralRatio: BigNumberish,
    borrowAsset: string,
    collateralAsset: string,
    collateralStrategy: string,
    requestAsLender: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    creditLineAddress: string,
    id: BigNumberish,
    toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'liquidate(address,uint256,bool)'(
    creditLineAddress: string,
    id: BigNumberish,
    toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    creditLineAddress: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'repay(address,uint256,uint256)'(
    creditLineAddress: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    creditLineAddress: string,
    id: BigNumberish,
    amount: BigNumberish,
    toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawCollateral(address,uint256,uint256,bool)'(
    creditLineAddress: string,
    id: BigNumberish,
    amount: BigNumberish,
    toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptRequest(creditLineAddress: string, id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'acceptRequest(address,uint256)'(creditLineAddress: string, id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    addCollateral(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      fromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'addCollateral(address,uint256,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      fromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(creditLineAddress: string, id: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'borrow(address,uint256,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    close(creditLineAddress: string, id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'close(address,uint256)'(creditLineAddress: string, id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createRequest(
      creditLineAddress: string,
      receiver: string,
      borrowLimit: BigNumberish,
      borrowRate: BigNumberish,
      autoLiquidation: boolean,
      collateralRatio: BigNumberish,
      borrowAsset: string,
      collateralAsset: string,
      collateralStrategy: string,
      requestAsLender: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'createRequest(address,address,uint256,uint256,bool,uint256,address,address,address,bool)'(
      creditLineAddress: string,
      receiver: string,
      borrowLimit: BigNumberish,
      borrowRate: BigNumberish,
      autoLiquidation: boolean,
      collateralRatio: BigNumberish,
      borrowAsset: string,
      collateralAsset: string,
      collateralStrategy: string,
      requestAsLender: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(creditLineAddress: string, id: BigNumberish, toSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'liquidate(address,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(creditLineAddress: string, id: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'repay(address,uint256,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateral(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'withdrawCollateral(address,uint256,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptRequest(
      creditLineAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'acceptRequest(address,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCollateral(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'addCollateral(address,uint256,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'borrow(address,uint256,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    close(creditLineAddress: string, id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'close(address,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createRequest(
      creditLineAddress: string,
      receiver: string,
      borrowLimit: BigNumberish,
      borrowRate: BigNumberish,
      autoLiquidation: boolean,
      collateralRatio: BigNumberish,
      borrowAsset: string,
      collateralAsset: string,
      collateralStrategy: string,
      requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'createRequest(address,address,uint256,uint256,bool,uint256,address,address,address,bool)'(
      creditLineAddress: string,
      receiver: string,
      borrowLimit: BigNumberish,
      borrowRate: BigNumberish,
      autoLiquidation: boolean,
      collateralRatio: BigNumberish,
      borrowAsset: string,
      collateralAsset: string,
      collateralStrategy: string,
      requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      creditLineAddress: string,
      id: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'liquidate(address,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'repay(address,uint256,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawCollateral(address,uint256,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptRequest(
      creditLineAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'acceptRequest(address,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCollateral(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'addCollateral(address,uint256,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'borrow(address,uint256,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    close(
      creditLineAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'close(address,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createRequest(
      creditLineAddress: string,
      receiver: string,
      borrowLimit: BigNumberish,
      borrowRate: BigNumberish,
      autoLiquidation: boolean,
      collateralRatio: BigNumberish,
      borrowAsset: string,
      collateralAsset: string,
      collateralStrategy: string,
      requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'createRequest(address,address,uint256,uint256,bool,uint256,address,address,address,bool)'(
      creditLineAddress: string,
      receiver: string,
      borrowLimit: BigNumberish,
      borrowRate: BigNumberish,
      autoLiquidation: boolean,
      collateralRatio: BigNumberish,
      borrowAsset: string,
      collateralAsset: string,
      collateralStrategy: string,
      requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      creditLineAddress: string,
      id: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'liquidate(address,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'repay(address,uint256,uint256)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawCollateral(address,uint256,uint256,bool)'(
      creditLineAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface CreditLineInterface extends ethers.utils.Interface {
  functions: {
    'CreditLineCounter()': FunctionFragment;
    'acceptCreditLineBorrower(bytes32)': FunctionFragment;
    'acceptCreditLineLender(bytes32)': FunctionFragment;
    'borrowFromCreditLine(uint256,bytes32)': FunctionFragment;
    'calculateBorrowableAmount(bytes32)': FunctionFragment;
    'calculateCurrentCollateralRatio(bytes32)': FunctionFragment;
    'calculateCurrentDebt(bytes32)': FunctionFragment;
    'calculateInterest(uint256,uint256,uint256)': FunctionFragment;
    'calculateInterestAccrued(bytes32)': FunctionFragment;
    'calculateTotalCollateralTokens(bytes32)': FunctionFragment;
    'closeCreditLine(bytes32)': FunctionFragment;
    'creditLineInfo(bytes32)': FunctionFragment;
    'creditLineUsage(bytes32)': FunctionFragment;
    'defaultStrategy()': FunctionFragment;
    'depositCollateral(address,uint256,bytes32,bool)': FunctionFragment;
    'initialize(address,address,address,address,address,uint256,address)': FunctionFragment;
    'liquidation(bytes32)': FunctionFragment;
    'owner()': FunctionFragment;
    'priceOracle()': FunctionFragment;
    'protocolFeeCollector()': FunctionFragment;
    'protocolFeeFraction()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repayCreditLine(uint256,bytes32,bool)': FunctionFragment;
    'requestCreditLineToBorrower(address,uint256,uint256,uint256,bool,uint256,address,address)': FunctionFragment;
    'requestCreditLineToLender(address,uint256,uint256,uint256,bool,uint256,address,address)': FunctionFragment;
    'savingsAccount()': FunctionFragment;
    'strategyRegistry()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateDefaultStrategy(address)': FunctionFragment;
    'updatePriceOracle(address)': FunctionFragment;
    'updateProtocolFeeCollector(address)': FunctionFragment;
    'updateProtocolFeeFraction(uint256)': FunctionFragment;
    'updateSavingsAccount(address)': FunctionFragment;
    'updateStrategyRegistry(address)': FunctionFragment;
    'withdrawCollateralFromCreditLine(bytes32,uint256)': FunctionFragment;
    'yearInSeconds()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'CreditLineCounter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptCreditLineBorrower', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'acceptCreditLineLender', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'borrowFromCreditLine', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'calculateBorrowableAmount', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'calculateCurrentCollateralRatio', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'calculateCurrentDebt', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'calculateInterest', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateInterestAccrued', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'calculateTotalCollateralTokens', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'closeCreditLine', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'creditLineInfo', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'creditLineUsage', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'defaultStrategy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositCollateral', values: [string, BigNumberish, BytesLike, boolean]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string, string, string, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'liquidation', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolFeeCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolFeeFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repayCreditLine', values: [BigNumberish, BytesLike, boolean]): string;
  encodeFunctionData(
    functionFragment: 'requestCreditLineToBorrower',
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'requestCreditLineToLender',
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: 'savingsAccount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'strategyRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateDefaultStrategy', values: [string]): string;
  encodeFunctionData(functionFragment: 'updatePriceOracle', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateProtocolFeeCollector', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateProtocolFeeFraction', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateSavingsAccount', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateStrategyRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdrawCollateralFromCreditLine', values: [BytesLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'yearInSeconds', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'CreditLineCounter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptCreditLineBorrower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptCreditLineLender', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowFromCreditLine', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateBorrowableAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateCurrentCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateCurrentDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateInterestAccrued', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateTotalCollateralTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeCreditLine', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditLineInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditLineUsage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolFeeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolFeeFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayCreditLine', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestCreditLineToBorrower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestCreditLineToLender', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'savingsAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDefaultStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePriceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProtocolFeeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProtocolFeeFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSavingsAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStrategyRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCollateralFromCreditLine', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'yearInSeconds', data: BytesLike): Result;

  events: {
    'BorrowedFromCreditLine(uint256,bytes32)': EventFragment;
    'CompleteCreditLineRepaid(bytes32,uint256)': EventFragment;
    'CreditLineAccepted(bytes32)': EventFragment;
    'CreditLineClosed(bytes32)': EventFragment;
    'CreditLineLiquidated(bytes32,address)': EventFragment;
    'CreditLineRequestedToBorrower(bytes32,address,address)': EventFragment;
    'CreditLineRequestedToLender(bytes32,address,address)': EventFragment;
    'CreditLineReset(bytes32)': EventFragment;
    'DefaultStrategyUpdated(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PartialCreditLineRepaid(bytes32,uint256)': EventFragment;
    'PriceOracleUpdated(address)': EventFragment;
    'ProtocolFeeCollectorUpdated(address)': EventFragment;
    'ProtocolFeeFractionUpdated(uint256)': EventFragment;
    'SavingsAccountUpdated(address)': EventFragment;
    'StrategyRegistryUpdated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BorrowedFromCreditLine'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CompleteCreditLineRepaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineAccepted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineClosed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineRequestedToBorrower'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineRequestedToLender'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineReset'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DefaultStrategyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PartialCreditLineRepaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PriceOracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeCollectorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeFractionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SavingsAccountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyRegistryUpdated'): EventFragment;
}

export class CreditLine extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CreditLineInterface;

  functions: {
    CreditLineCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    'CreditLineCounter()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptCreditLineBorrower(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'acceptCreditLineBorrower(bytes32)'(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptCreditLineLender(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'acceptCreditLineLender(bytes32)'(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowFromCreditLine(
      borrowAmount: BigNumberish,
      creditLineHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'borrowFromCreditLine(uint256,bytes32)'(
      borrowAmount: BigNumberish,
      creditLineHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateBorrowableAmount(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'calculateBorrowableAmount(bytes32)'(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateCurrentCollateralRatio(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'calculateCurrentCollateralRatio(bytes32)'(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateCurrentDebt(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    'calculateCurrentDebt(bytes32)'(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateInterest(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'calculateInterest(uint256,uint256,uint256)'(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateInterestAccrued(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    'calculateInterestAccrued(bytes32)'(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateTotalCollateralTokens(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'calculateTotalCollateralTokens(bytes32)'(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeCreditLine(creditLineHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'closeCreditLine(bytes32)'(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditLineInfo(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string, number, boolean, boolean] & {
        exists: boolean;
        lender: string;
        borrower: string;
        borrowLimit: BigNumber;
        idealCollateralRatio: BigNumber;
        liquidationThreshold: BigNumber;
        borrowRate: BigNumber;
        borrowAsset: string;
        collateralAsset: string;
        currentStatus: number;
        autoLiquidation: boolean;
        requestByLender: boolean;
      }
    >;

    'creditLineInfo(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string, number, boolean, boolean] & {
        exists: boolean;
        lender: string;
        borrower: string;
        borrowLimit: BigNumber;
        idealCollateralRatio: BigNumber;
        liquidationThreshold: BigNumber;
        borrowRate: BigNumber;
        borrowAsset: string;
        collateralAsset: string;
        currentStatus: number;
        autoLiquidation: boolean;
        requestByLender: boolean;
      }
    >;

    creditLineUsage(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillPrincipalUpdate: BigNumber;
        collateralAmount: BigNumber;
      }
    >;

    'creditLineUsage(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillPrincipalUpdate: BigNumber;
        collateralAmount: BigNumber;
      }
    >;

    defaultStrategy(overrides?: CallOverrides): Promise<[string]>;

    'defaultStrategy()'(overrides?: CallOverrides): Promise<[string]>;

    depositCollateral(
      _collateralAsset: string,
      _collateralAmount: BigNumberish,
      _creditLineHash: BytesLike,
      _fromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'depositCollateral(address,uint256,bytes32,bool)'(
      _collateralAsset: string,
      _collateralAmount: BigNumberish,
      _creditLineHash: BytesLike,
      _fromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _defaultStrategy: string,
      _priceOracle: string,
      _savingsAccount: string,
      _strategyRegistry: string,
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(address,address,address,address,address,uint256,address)'(
      _defaultStrategy: string,
      _priceOracle: string,
      _savingsAccount: string,
      _strategyRegistry: string,
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidation(
      creditLineHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'liquidation(bytes32)'(
      creditLineHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    'priceOracle()'(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    repayCreditLine(
      repayAmount: BigNumberish,
      creditLineHash: BytesLike,
      _transferFromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'repayCreditLine(uint256,bytes32,bool)'(
      repayAmount: BigNumberish,
      creditLineHash: BytesLike,
      _transferFromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestCreditLineToBorrower(
      _borrower: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'requestCreditLineToBorrower(address,uint256,uint256,uint256,bool,uint256,address,address)'(
      _borrower: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestCreditLineToLender(
      _lender: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'requestCreditLineToLender(address,uint256,uint256,uint256,bool,uint256,address,address)'(
      _lender: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    savingsAccount(overrides?: CallOverrides): Promise<[string]>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<[string]>;

    strategyRegistry(overrides?: CallOverrides): Promise<[string]>;

    'strategyRegistry()'(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDefaultStrategy(
      _defaultStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateDefaultStrategy(address)'(
      _defaultStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriceOracle(_priceOracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'updatePriceOracle(address)'(
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolFeeFraction(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSavingsAccount(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateSavingsAccount(address)'(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStrategyRegistry(
      _strategyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateStrategyRegistry(address)'(
      _strategyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateralFromCreditLine(
      creditLineHash: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawCollateralFromCreditLine(bytes32,uint256)'(
      creditLineHash: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yearInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    'yearInSeconds()'(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  CreditLineCounter(overrides?: CallOverrides): Promise<BigNumber>;

  'CreditLineCounter()'(overrides?: CallOverrides): Promise<BigNumber>;

  acceptCreditLineBorrower(
    _creditLineHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'acceptCreditLineBorrower(bytes32)'(
    _creditLineHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptCreditLineLender(
    _creditLineHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'acceptCreditLineLender(bytes32)'(
    _creditLineHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowFromCreditLine(
    borrowAmount: BigNumberish,
    creditLineHash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'borrowFromCreditLine(uint256,bytes32)'(
    borrowAmount: BigNumberish,
    creditLineHash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateBorrowableAmount(
    _creditLineHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'calculateBorrowableAmount(bytes32)'(
    _creditLineHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateCurrentCollateralRatio(
    creditLineHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'calculateCurrentCollateralRatio(bytes32)'(
    creditLineHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateCurrentDebt(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  'calculateCurrentDebt(bytes32)'(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  calculateInterest(
    _principal: BigNumberish,
    _borrowRate: BigNumberish,
    _timeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'calculateInterest(uint256,uint256,uint256)'(
    _principal: BigNumberish,
    _borrowRate: BigNumberish,
    _timeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateInterestAccrued(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  'calculateInterestAccrued(bytes32)'(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  calculateTotalCollateralTokens(
    creditLineHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'calculateTotalCollateralTokens(bytes32)'(
    creditLineHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeCreditLine(creditLineHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'closeCreditLine(bytes32)'(
    creditLineHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditLineInfo(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string, number, boolean, boolean] & {
      exists: boolean;
      lender: string;
      borrower: string;
      borrowLimit: BigNumber;
      idealCollateralRatio: BigNumber;
      liquidationThreshold: BigNumber;
      borrowRate: BigNumber;
      borrowAsset: string;
      collateralAsset: string;
      currentStatus: number;
      autoLiquidation: boolean;
      requestByLender: boolean;
    }
  >;

  'creditLineInfo(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string, number, boolean, boolean] & {
      exists: boolean;
      lender: string;
      borrower: string;
      borrowLimit: BigNumber;
      idealCollateralRatio: BigNumber;
      liquidationThreshold: BigNumber;
      borrowRate: BigNumber;
      borrowAsset: string;
      collateralAsset: string;
      currentStatus: number;
      autoLiquidation: boolean;
      requestByLender: boolean;
    }
  >;

  creditLineUsage(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      principal: BigNumber;
      totalInterestRepaid: BigNumber;
      lastPrincipalUpdateTime: BigNumber;
      interestAccruedTillPrincipalUpdate: BigNumber;
      collateralAmount: BigNumber;
    }
  >;

  'creditLineUsage(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      principal: BigNumber;
      totalInterestRepaid: BigNumber;
      lastPrincipalUpdateTime: BigNumber;
      interestAccruedTillPrincipalUpdate: BigNumber;
      collateralAmount: BigNumber;
    }
  >;

  defaultStrategy(overrides?: CallOverrides): Promise<string>;

  'defaultStrategy()'(overrides?: CallOverrides): Promise<string>;

  depositCollateral(
    _collateralAsset: string,
    _collateralAmount: BigNumberish,
    _creditLineHash: BytesLike,
    _fromSavingAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'depositCollateral(address,uint256,bytes32,bool)'(
    _collateralAsset: string,
    _collateralAmount: BigNumberish,
    _creditLineHash: BytesLike,
    _fromSavingAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _defaultStrategy: string,
    _priceOracle: string,
    _savingsAccount: string,
    _strategyRegistry: string,
    _owner: string,
    _protocolFeeFraction: BigNumberish,
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(address,address,address,address,address,uint256,address)'(
    _defaultStrategy: string,
    _priceOracle: string,
    _savingsAccount: string,
    _strategyRegistry: string,
    _owner: string,
    _protocolFeeFraction: BigNumberish,
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidation(creditLineHash: BytesLike, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'liquidation(bytes32)'(
    creditLineHash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  'priceOracle()'(overrides?: CallOverrides): Promise<string>;

  protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

  'protocolFeeCollector()'(overrides?: CallOverrides): Promise<string>;

  protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  repayCreditLine(
    repayAmount: BigNumberish,
    creditLineHash: BytesLike,
    _transferFromSavingAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'repayCreditLine(uint256,bytes32,bool)'(
    repayAmount: BigNumberish,
    creditLineHash: BytesLike,
    _transferFromSavingAccount: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestCreditLineToBorrower(
    _borrower: string,
    _borrowLimit: BigNumberish,
    _liquidationThreshold: BigNumberish,
    _borrowRate: BigNumberish,
    _autoLiquidation: boolean,
    _collateralRatio: BigNumberish,
    _borrowAsset: string,
    _collateralAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'requestCreditLineToBorrower(address,uint256,uint256,uint256,bool,uint256,address,address)'(
    _borrower: string,
    _borrowLimit: BigNumberish,
    _liquidationThreshold: BigNumberish,
    _borrowRate: BigNumberish,
    _autoLiquidation: boolean,
    _collateralRatio: BigNumberish,
    _borrowAsset: string,
    _collateralAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestCreditLineToLender(
    _lender: string,
    _borrowLimit: BigNumberish,
    _liquidationThreshold: BigNumberish,
    _borrowRate: BigNumberish,
    _autoLiquidation: boolean,
    _collateralRatio: BigNumberish,
    _borrowAsset: string,
    _collateralAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'requestCreditLineToLender(address,uint256,uint256,uint256,bool,uint256,address,address)'(
    _lender: string,
    _borrowLimit: BigNumberish,
    _liquidationThreshold: BigNumberish,
    _borrowRate: BigNumberish,
    _autoLiquidation: boolean,
    _collateralRatio: BigNumberish,
    _borrowAsset: string,
    _collateralAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  savingsAccount(overrides?: CallOverrides): Promise<string>;

  'savingsAccount()'(overrides?: CallOverrides): Promise<string>;

  strategyRegistry(overrides?: CallOverrides): Promise<string>;

  'strategyRegistry()'(overrides?: CallOverrides): Promise<string>;

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  updateDefaultStrategy(
    _defaultStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateDefaultStrategy(address)'(
    _defaultStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriceOracle(_priceOracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'updatePriceOracle(address)'(
    _priceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolFeeCollector(
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateProtocolFeeCollector(address)'(
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolFeeFraction(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateProtocolFeeFraction(uint256)'(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSavingsAccount(_savingsAccount: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'updateSavingsAccount(address)'(
    _savingsAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStrategyRegistry(
    _strategyRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateStrategyRegistry(address)'(
    _strategyRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateralFromCreditLine(
    creditLineHash: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawCollateralFromCreditLine(bytes32,uint256)'(
    creditLineHash: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yearInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  'yearInSeconds()'(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CreditLineCounter(overrides?: CallOverrides): Promise<BigNumber>;

    'CreditLineCounter()'(overrides?: CallOverrides): Promise<BigNumber>;

    acceptCreditLineBorrower(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    'acceptCreditLineBorrower(bytes32)'(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    acceptCreditLineLender(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    'acceptCreditLineLender(bytes32)'(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    borrowFromCreditLine(borrowAmount: BigNumberish, creditLineHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    'borrowFromCreditLine(uint256,bytes32)'(
      borrowAmount: BigNumberish,
      creditLineHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateBorrowableAmount(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateBorrowableAmount(bytes32)'(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    calculateCurrentCollateralRatio(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentCollateralRatio(bytes32)'(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    calculateCurrentDebt(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentDebt(bytes32)'(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterest(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateInterest(uint256,uint256,uint256)'(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInterestAccrued(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateInterestAccrued(bytes32)'(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalCollateralTokens(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateTotalCollateralTokens(bytes32)'(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    closeCreditLine(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    'closeCreditLine(bytes32)'(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    creditLineInfo(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string, number, boolean, boolean] & {
        exists: boolean;
        lender: string;
        borrower: string;
        borrowLimit: BigNumber;
        idealCollateralRatio: BigNumber;
        liquidationThreshold: BigNumber;
        borrowRate: BigNumber;
        borrowAsset: string;
        collateralAsset: string;
        currentStatus: number;
        autoLiquidation: boolean;
        requestByLender: boolean;
      }
    >;

    'creditLineInfo(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber, string, string, number, boolean, boolean] & {
        exists: boolean;
        lender: string;
        borrower: string;
        borrowLimit: BigNumber;
        idealCollateralRatio: BigNumber;
        liquidationThreshold: BigNumber;
        borrowRate: BigNumber;
        borrowAsset: string;
        collateralAsset: string;
        currentStatus: number;
        autoLiquidation: boolean;
        requestByLender: boolean;
      }
    >;

    creditLineUsage(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillPrincipalUpdate: BigNumber;
        collateralAmount: BigNumber;
      }
    >;

    'creditLineUsage(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillPrincipalUpdate: BigNumber;
        collateralAmount: BigNumber;
      }
    >;

    defaultStrategy(overrides?: CallOverrides): Promise<string>;

    'defaultStrategy()'(overrides?: CallOverrides): Promise<string>;

    depositCollateral(
      _collateralAsset: string,
      _collateralAmount: BigNumberish,
      _creditLineHash: BytesLike,
      _fromSavingAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'depositCollateral(address,uint256,bytes32,bool)'(
      _collateralAsset: string,
      _collateralAmount: BigNumberish,
      _creditLineHash: BytesLike,
      _fromSavingAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _defaultStrategy: string,
      _priceOracle: string,
      _savingsAccount: string,
      _strategyRegistry: string,
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'initialize(address,address,address,address,address,uint256,address)'(
      _defaultStrategy: string,
      _priceOracle: string,
      _savingsAccount: string,
      _strategyRegistry: string,
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidation(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    'liquidation(bytes32)'(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    'priceOracle()'(overrides?: CallOverrides): Promise<string>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<string>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    repayCreditLine(
      repayAmount: BigNumberish,
      creditLineHash: BytesLike,
      _transferFromSavingAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'repayCreditLine(uint256,bytes32,bool)'(
      repayAmount: BigNumberish,
      creditLineHash: BytesLike,
      _transferFromSavingAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    requestCreditLineToBorrower(
      _borrower: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    'requestCreditLineToBorrower(address,uint256,uint256,uint256,bool,uint256,address,address)'(
      _borrower: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    requestCreditLineToLender(
      _lender: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    'requestCreditLineToLender(address,uint256,uint256,uint256,bool,uint256,address,address)'(
      _lender: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    savingsAccount(overrides?: CallOverrides): Promise<string>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<string>;

    strategyRegistry(overrides?: CallOverrides): Promise<string>;

    'strategyRegistry()'(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateDefaultStrategy(_defaultStrategy: string, overrides?: CallOverrides): Promise<void>;

    'updateDefaultStrategy(address)'(_defaultStrategy: string, overrides?: CallOverrides): Promise<void>;

    updatePriceOracle(_priceOracle: string, overrides?: CallOverrides): Promise<void>;

    'updatePriceOracle(address)'(_priceOracle: string, overrides?: CallOverrides): Promise<void>;

    updateProtocolFeeCollector(_protocolFeeCollector: string, overrides?: CallOverrides): Promise<void>;

    'updateProtocolFeeCollector(address)'(_protocolFeeCollector: string, overrides?: CallOverrides): Promise<void>;

    updateProtocolFeeFraction(_protocolFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateProtocolFeeFraction(uint256)'(_protocolFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateSavingsAccount(_savingsAccount: string, overrides?: CallOverrides): Promise<void>;

    'updateSavingsAccount(address)'(_savingsAccount: string, overrides?: CallOverrides): Promise<void>;

    updateStrategyRegistry(_strategyRegistry: string, overrides?: CallOverrides): Promise<void>;

    'updateStrategyRegistry(address)'(_strategyRegistry: string, overrides?: CallOverrides): Promise<void>;

    withdrawCollateralFromCreditLine(creditLineHash: BytesLike, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdrawCollateralFromCreditLine(bytes32,uint256)'(
      creditLineHash: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    yearInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    'yearInSeconds()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    BorrowedFromCreditLine(
      borrowAmount: null,
      creditLineHash: null
    ): TypedEventFilter<[BigNumber, string], { borrowAmount: BigNumber; creditLineHash: string }>;

    CompleteCreditLineRepaid(
      creditLineHash: null,
      repayAmount: null
    ): TypedEventFilter<[string, BigNumber], { creditLineHash: string; repayAmount: BigNumber }>;

    CreditLineAccepted(creditLineHash: null): TypedEventFilter<[string], { creditLineHash: string }>;

    CreditLineClosed(creditLineHash: null): TypedEventFilter<[string], { creditLineHash: string }>;

    CreditLineLiquidated(
      creditLineHash: null,
      liquidator: null
    ): TypedEventFilter<[string, string], { creditLineHash: string; liquidator: string }>;

    CreditLineRequestedToBorrower(
      creditLineHash: null,
      lender: null,
      borrower: null
    ): TypedEventFilter<[string, string, string], { creditLineHash: string; lender: string; borrower: string }>;

    CreditLineRequestedToLender(
      creditLineHash: null,
      lender: null,
      borrower: null
    ): TypedEventFilter<[string, string, string], { creditLineHash: string; lender: string; borrower: string }>;

    CreditLineReset(creditLineHash: null): TypedEventFilter<[string], { creditLineHash: string }>;

    DefaultStrategyUpdated(defaultStrategy: null): TypedEventFilter<[string], { defaultStrategy: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    PartialCreditLineRepaid(
      creditLineHash: null,
      repayAmount: null
    ): TypedEventFilter<[string, BigNumber], { creditLineHash: string; repayAmount: BigNumber }>;

    PriceOracleUpdated(priceOracle: null): TypedEventFilter<[string], { priceOracle: string }>;

    ProtocolFeeCollectorUpdated(updatedProtocolFeeCollector: null): TypedEventFilter<[string], { updatedProtocolFeeCollector: string }>;

    ProtocolFeeFractionUpdated(updatedProtocolFee: null): TypedEventFilter<[BigNumber], { updatedProtocolFee: BigNumber }>;

    SavingsAccountUpdated(savingsAccount: null): TypedEventFilter<[string], { savingsAccount: string }>;

    StrategyRegistryUpdated(strategyRegistry: null): TypedEventFilter<[string], { strategyRegistry: string }>;
  };

  estimateGas: {
    CreditLineCounter(overrides?: CallOverrides): Promise<BigNumber>;

    'CreditLineCounter()'(overrides?: CallOverrides): Promise<BigNumber>;

    acceptCreditLineBorrower(_creditLineHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'acceptCreditLineBorrower(bytes32)'(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptCreditLineLender(_creditLineHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'acceptCreditLineLender(bytes32)'(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowFromCreditLine(
      borrowAmount: BigNumberish,
      creditLineHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'borrowFromCreditLine(uint256,bytes32)'(
      borrowAmount: BigNumberish,
      creditLineHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateBorrowableAmount(_creditLineHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'calculateBorrowableAmount(bytes32)'(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateCurrentCollateralRatio(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'calculateCurrentCollateralRatio(bytes32)'(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateCurrentDebt(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentDebt(bytes32)'(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterest(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateInterest(uint256,uint256,uint256)'(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInterestAccrued(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateInterestAccrued(bytes32)'(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalCollateralTokens(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'calculateTotalCollateralTokens(bytes32)'(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeCreditLine(creditLineHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'closeCreditLine(bytes32)'(creditLineHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    creditLineInfo(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'creditLineInfo(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    creditLineUsage(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'creditLineUsage(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    defaultStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    'defaultStrategy()'(overrides?: CallOverrides): Promise<BigNumber>;

    depositCollateral(
      _collateralAsset: string,
      _collateralAmount: BigNumberish,
      _creditLineHash: BytesLike,
      _fromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'depositCollateral(address,uint256,bytes32,bool)'(
      _collateralAsset: string,
      _collateralAmount: BigNumberish,
      _creditLineHash: BytesLike,
      _fromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _defaultStrategy: string,
      _priceOracle: string,
      _savingsAccount: string,
      _strategyRegistry: string,
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(address,address,address,address,address,uint256,address)'(
      _defaultStrategy: string,
      _priceOracle: string,
      _savingsAccount: string,
      _strategyRegistry: string,
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidation(creditLineHash: BytesLike, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'liquidation(bytes32)'(
      creditLineHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    'priceOracle()'(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    repayCreditLine(
      repayAmount: BigNumberish,
      creditLineHash: BytesLike,
      _transferFromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'repayCreditLine(uint256,bytes32,bool)'(
      repayAmount: BigNumberish,
      creditLineHash: BytesLike,
      _transferFromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestCreditLineToBorrower(
      _borrower: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'requestCreditLineToBorrower(address,uint256,uint256,uint256,bool,uint256,address,address)'(
      _borrower: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestCreditLineToLender(
      _lender: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'requestCreditLineToLender(address,uint256,uint256,uint256,bool,uint256,address,address)'(
      _lender: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    savingsAccount(overrides?: CallOverrides): Promise<BigNumber>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<BigNumber>;

    strategyRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    'strategyRegistry()'(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateDefaultStrategy(_defaultStrategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateDefaultStrategy(address)'(
      _defaultStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriceOracle(_priceOracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updatePriceOracle(address)'(_priceOracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProtocolFeeFraction(_protocolFee: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSavingsAccount(_savingsAccount: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateSavingsAccount(address)'(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStrategyRegistry(_strategyRegistry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateStrategyRegistry(address)'(
      _strategyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateralFromCreditLine(
      creditLineHash: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawCollateralFromCreditLine(bytes32,uint256)'(
      creditLineHash: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yearInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    'yearInSeconds()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CreditLineCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'CreditLineCounter()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptCreditLineBorrower(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'acceptCreditLineBorrower(bytes32)'(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptCreditLineLender(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'acceptCreditLineLender(bytes32)'(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowFromCreditLine(
      borrowAmount: BigNumberish,
      creditLineHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'borrowFromCreditLine(uint256,bytes32)'(
      borrowAmount: BigNumberish,
      creditLineHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateBorrowableAmount(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateBorrowableAmount(bytes32)'(
      _creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateCurrentCollateralRatio(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateCurrentCollateralRatio(bytes32)'(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateCurrentDebt(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'calculateCurrentDebt(bytes32)'(_creditLineHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateInterest(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculateInterest(uint256,uint256,uint256)'(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInterestAccrued(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'calculateInterestAccrued(bytes32)'(creditLineHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateTotalCollateralTokens(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateTotalCollateralTokens(bytes32)'(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeCreditLine(creditLineHash: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'closeCreditLine(bytes32)'(
      creditLineHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditLineInfo(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'creditLineInfo(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditLineUsage(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'creditLineUsage(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'defaultStrategy()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositCollateral(
      _collateralAsset: string,
      _collateralAmount: BigNumberish,
      _creditLineHash: BytesLike,
      _fromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'depositCollateral(address,uint256,bytes32,bool)'(
      _collateralAsset: string,
      _collateralAmount: BigNumberish,
      _creditLineHash: BytesLike,
      _fromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _defaultStrategy: string,
      _priceOracle: string,
      _savingsAccount: string,
      _strategyRegistry: string,
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(address,address,address,address,address,uint256,address)'(
      _defaultStrategy: string,
      _priceOracle: string,
      _savingsAccount: string,
      _strategyRegistry: string,
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidation(
      creditLineHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'liquidation(bytes32)'(
      creditLineHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'priceOracle()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    repayCreditLine(
      repayAmount: BigNumberish,
      creditLineHash: BytesLike,
      _transferFromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'repayCreditLine(uint256,bytes32,bool)'(
      repayAmount: BigNumberish,
      creditLineHash: BytesLike,
      _transferFromSavingAccount: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestCreditLineToBorrower(
      _borrower: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'requestCreditLineToBorrower(address,uint256,uint256,uint256,bool,uint256,address,address)'(
      _borrower: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestCreditLineToLender(
      _lender: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'requestCreditLineToLender(address,uint256,uint256,uint256,bool,uint256,address,address)'(
      _lender: string,
      _borrowLimit: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _collateralAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    savingsAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'strategyRegistry()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDefaultStrategy(
      _defaultStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateDefaultStrategy(address)'(
      _defaultStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceOracle(_priceOracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'updatePriceOracle(address)'(
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolFeeFraction(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSavingsAccount(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateSavingsAccount(address)'(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStrategyRegistry(
      _strategyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateStrategyRegistry(address)'(
      _strategyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateralFromCreditLine(
      creditLineHash: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawCollateralFromCreditLine(bytes32,uint256)'(
      creditLineHash: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yearInSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'yearInSeconds()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface LenderPoolInterface extends ethers.utils.Interface {
  functions: {
    'POOLED_CREDIT_LINE()': FunctionFragment;
    'SAVINGS_ACCOUNT()': FunctionFragment;
    'balanceOf(address,uint256)': FunctionFragment;
    'balanceOfBatch(address[],uint256[])': FunctionFragment;
    'borrowed(uint256,uint256)': FunctionFragment;
    'calculatePrincipleWithdrawable(uint256,address)': FunctionFragment;
    'create(uint256,address,address,address,uint256,uint256,bool)': FunctionFragment;
    'initialize()': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'lend(uint256,uint256)': FunctionFragment;
    'liquidate(uint256,bool)': FunctionFragment;
    'repaid(uint256,uint256,uint256)': FunctionFragment;
    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'totalSupply(uint256)': FunctionFragment;
    'uri(uint256)': FunctionFragment;
    'withdrawInterest(uint256,address)': FunctionFragment;
    'withdrawLiquidation(uint256,address)': FunctionFragment;
    'withdrawLiquidity(uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'POOLED_CREDIT_LINE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SAVINGS_ACCOUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOfBatch', values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'borrowed', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculatePrincipleWithdrawable', values: [BigNumberish, string]): string;
  encodeFunctionData(
    functionFragment: 'create',
    values: [BigNumberish, string, string, string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'lend', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'liquidate', values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'repaid', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'safeTransferFrom', values: [string, string, BigNumberish, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'uri', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawInterest', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'withdrawLiquidation', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'withdrawLiquidity', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'POOLED_CREDIT_LINE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SAVINGS_ACCOUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculatePrincipleWithdrawable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'create', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lend', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeBatchTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawLiquidation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawLiquidity', data: BytesLike): Result;

  events: {
    'ApprovalForAll(address,address,bool)': EventFragment;
    'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment;
    'TransferSingle(address,address,address,uint256,uint256)': EventFragment;
    'URI(string,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'URI'): EventFragment;
}

export class LenderPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LenderPoolInterface;

  functions: {
    POOLED_CREDIT_LINE(overrides?: CallOverrides): Promise<[string]>;

    'POOLED_CREDIT_LINE()'(overrides?: CallOverrides): Promise<[string]>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<[string]>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'balanceOf(address,uint256)'(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfBatch(accounts: string[], ids: BigNumberish[], overrides?: CallOverrides): Promise<[BigNumber[]]>;

    'balanceOfBatch(address[],uint256[])'(accounts: string[], ids: BigNumberish[], overrides?: CallOverrides): Promise<[BigNumber[]]>;

    borrowed(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'borrowed(uint256,uint256)'(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculatePrincipleWithdrawable(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'calculatePrincipleWithdrawable(uint256,address)'(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    create(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'create(uint256,address,address,address,uint256,uint256,bool)'(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'initialize()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    'isApprovedForAll(address,address)'(account: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    lend(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'lend(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      _id: BigNumberish,
      _withdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'liquidate(uint256,bool)'(
      _id: BigNumberish,
      _withdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repaid(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'repaid(uint256,uint256,uint256)'(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)'(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,uint256,bytes)'(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    'supportsInterface(bytes4)'(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    totalSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalSupply(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    'uri(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    withdrawInterest(
      _id: BigNumberish,
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawInterest(uint256,address)'(
      _id: BigNumberish,
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidation(
      _id: BigNumberish,
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawLiquidation(uint256,address)'(
      _id: BigNumberish,
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidity(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'withdrawLiquidity(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  POOLED_CREDIT_LINE(overrides?: CallOverrides): Promise<string>;

  'POOLED_CREDIT_LINE()'(overrides?: CallOverrides): Promise<string>;

  SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<string>;

  'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceOf(address,uint256)'(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfBatch(accounts: string[], ids: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber[]>;

  'balanceOfBatch(address[],uint256[])'(accounts: string[], ids: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber[]>;

  borrowed(
    _id: BigNumberish,
    _sharesBorrowed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'borrowed(uint256,uint256)'(
    _id: BigNumberish,
    _sharesBorrowed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculatePrincipleWithdrawable(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'calculatePrincipleWithdrawable(uint256,address)'(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  create(
    _id: BigNumberish,
    _verifier: string,
    _token: string,
    _strategy: string,
    _borrowLimit: BigNumberish,
    _collectionPeriod: BigNumberish,
    _areTokensTransferable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'create(uint256,address,address,address,uint256,uint256,bool)'(
    _id: BigNumberish,
    _verifier: string,
    _token: string,
    _strategy: string,
    _borrowLimit: BigNumberish,
    _collectionPeriod: BigNumberish,
    _areTokensTransferable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'initialize()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  'isApprovedForAll(address,address)'(account: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  lend(_id: BigNumberish, _amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'lend(uint256,uint256)'(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    _id: BigNumberish,
    _withdraw: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'liquidate(uint256,bool)'(
    _id: BigNumberish,
    _withdraw: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repaid(
    _id: BigNumberish,
    _sharesRepaid: BigNumberish,
    _interestShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'repaid(uint256,uint256,uint256)'(
    _id: BigNumberish,
    _sharesRepaid: BigNumberish,
    _interestShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)'(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,uint256,bytes)'(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setApprovalForAll(address,bool)'(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  'supportsInterface(bytes4)'(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  totalSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'uri(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  withdrawInterest(
    _id: BigNumberish,
    _lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawInterest(uint256,address)'(
    _id: BigNumberish,
    _lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidation(
    _id: BigNumberish,
    _lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawLiquidation(uint256,address)'(
    _id: BigNumberish,
    _lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidity(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'withdrawLiquidity(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    POOLED_CREDIT_LINE(overrides?: CallOverrides): Promise<string>;

    'POOLED_CREDIT_LINE()'(overrides?: CallOverrides): Promise<string>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<string>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address,uint256)'(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfBatch(accounts: string[], ids: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber[]>;

    'balanceOfBatch(address[],uint256[])'(accounts: string[], ids: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber[]>;

    borrowed(_id: BigNumberish, _sharesBorrowed: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'borrowed(uint256,uint256)'(_id: BigNumberish, _sharesBorrowed: BigNumberish, overrides?: CallOverrides): Promise<void>;

    calculatePrincipleWithdrawable(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'calculatePrincipleWithdrawable(uint256,address)'(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    create(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'create(uint256,address,address,address,uint256,uint256,bool)'(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    'initialize()'(overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    'isApprovedForAll(address,address)'(account: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    lend(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'lend(uint256,uint256)'(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    liquidate(_id: BigNumberish, _withdraw: boolean, overrides?: CallOverrides): Promise<void>;

    'liquidate(uint256,bool)'(_id: BigNumberish, _withdraw: boolean, overrides?: CallOverrides): Promise<void>;

    repaid(_id: BigNumberish, _sharesRepaid: BigNumberish, _interestShares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'repaid(uint256,uint256,uint256)'(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)'(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,uint256,bytes)'(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>;

    'setApprovalForAll(address,bool)'(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    'supportsInterface(bytes4)'(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    totalSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'uri(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    withdrawInterest(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<void>;

    'withdrawInterest(uint256,address)'(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<void>;

    withdrawLiquidation(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<void>;

    'withdrawLiquidation(uint256,address)'(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<void>;

    withdrawLiquidity(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdrawLiquidity(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): TypedEventFilter<[string, string, boolean], { account: string; operator: string; approved: boolean }>;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    URI(value: null, id: BigNumberish | null): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;
  };

  estimateGas: {
    POOLED_CREDIT_LINE(overrides?: CallOverrides): Promise<BigNumber>;

    'POOLED_CREDIT_LINE()'(overrides?: CallOverrides): Promise<BigNumber>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address,uint256)'(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfBatch(accounts: string[], ids: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOfBatch(address[],uint256[])'(accounts: string[], ids: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    borrowed(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'borrowed(uint256,uint256)'(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculatePrincipleWithdrawable(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'calculatePrincipleWithdrawable(uint256,address)'(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    create(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'create(uint256,address,address,address,uint256,uint256,bool)'(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'initialize()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isApprovedForAll(address,address)'(account: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    lend(_id: BigNumberish, _amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'lend(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(_id: BigNumberish, _withdraw: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'liquidate(uint256,bool)'(
      _id: BigNumberish,
      _withdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repaid(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'repaid(uint256,uint256,uint256)'(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)'(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,uint256,bytes)'(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(operator: string, approved: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'supportsInterface(bytes4)'(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'uri(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawInterest(_id: BigNumberish, _lender: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawInterest(uint256,address)'(
      _id: BigNumberish,
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidation(
      _id: BigNumberish,
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawLiquidation(uint256,address)'(
      _id: BigNumberish,
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidity(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawLiquidity(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    POOLED_CREDIT_LINE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'POOLED_CREDIT_LINE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'balanceOf(address,uint256)'(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfBatch(accounts: string[], ids: BigNumberish[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'balanceOfBatch(address[],uint256[])'(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowed(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'borrowed(uint256,uint256)'(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculatePrincipleWithdrawable(_id: BigNumberish, _lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'calculatePrincipleWithdrawable(uint256,address)'(
      _id: BigNumberish,
      _lender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'create(uint256,address,address,address,uint256,uint256,bool)'(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'initialize()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isApprovedForAll(address,address)'(account: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lend(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'lend(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      _id: BigNumberish,
      _withdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'liquidate(uint256,bool)'(
      _id: BigNumberish,
      _withdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repaid(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'repaid(uint256,uint256,uint256)'(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)'(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,uint256,bytes)'(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'supportsInterface(bytes4)'(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'uri(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawInterest(
      _id: BigNumberish,
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawInterest(uint256,address)'(
      _id: BigNumberish,
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidation(
      _id: BigNumberish,
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawLiquidation(uint256,address)'(
      _id: BigNumberish,
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'withdrawLiquidity(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
